<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>面向对象设计的五个基本原则</title>
      <link href="/2018/05/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%BA%94%E4%B8%AA%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/"/>
      <url>/2018/05/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%BA%94%E4%B8%AA%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<p>面向对象设计的3个基本要素：封装、继承、多态  </p><p>面向对象设计的5个基本原则：单一职责原则、开放封闭、里氏置换、依赖倒置、接口隔离<br><a id="more"></a></p><h1 id="单一职责原则（Single-Resposibility-Principle）"><a href="#单一职责原则（Single-Resposibility-Principle）" class="headerlink" title="单一职责原则（Single-Resposibility Principle）"></a>单一职责原则（Single-Resposibility Principle）</h1><p>其核心思想为：一个类，最好只做一件事，只有一个引起它的变化。<br>单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。职责过多，可能引起它变化的原因就越多，这将导致职责依赖，相互之间就产生影响，从而大大损伤其内聚性和耦合度。通常意义下的单一职责，就是指只有一种单一功能，不要为类实现过多的功能点，以保证实体只有一个引起它变化的原因。<br>专注，是一个人优良的品质；同样的，单一也是一个类的优良设计。交杂不清的职责将使得代码看起来特别别扭牵一发而动全身，有失美感和必然导致丑陋的系统错误风险。</p><h1 id="开放封闭原则（Open-Closed-principle）"><a href="#开放封闭原则（Open-Closed-principle）" class="headerlink" title="开放封闭原则（Open-Closed principle）"></a>开放封闭原则（Open-Closed principle）</h1><p>其核心思想是：软件实体应该是可扩展的，而不是可修改的。也就是说对扩展开放，对修改封闭。<br>1、对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。<br>2、对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对其进行任何尝试的修改。<br>实现开开放封闭原则的核心思想就是对抽象编程，而不对具体编程，因为抽象相对稳定。让类依赖于固定的抽象，所以修改就是封闭的；而通过面向对象的继承和多态机制，又可以实现对抽象类的继承，通过覆写其方法来改变固有行为，实现新的拓展方法，所以就是开放的。<br>“需求总是变化”没有不变的软件，所以就需要用封闭开放原则来封闭变化满足需求，同时还能保持软件内部的封装体系稳定，不被需求的变化影响。</p><h1 id="里氏置换原则（Liskov-Substituion-Principle）"><a href="#里氏置换原则（Liskov-Substituion-Principle）" class="headerlink" title="里氏置换原则（Liskov-Substituion Principle）"></a>里氏置换原则（Liskov-Substituion Principle）</h1><p>其核心思想是：子类必须能够替换其基类。<br>这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础。在父类和子类的具体行为中，必须严格把握继承层次中的关系和特征，将基类替换为子类，程序的行为不会发生任何变化。同时，这一约束反过来则是不成立的，子类可以替换基类，但是基类不一定能替换子类。<br>Liskov替换原则，主要着眼于对抽象和多态建立在继承的基础上，因此只有遵循了Liskov替换原则，才能保证继承复用是可靠地。实现的方法是面向接口编程：将公共部分抽象为基类接口或抽象类，通过Extract Abstract Class，在子类中通过覆写父类的方法实现新的方式支持同样的职责。<br>Liskov替换原则是关于继承机制的设计原则，违反了Liskov替换原则就必然导致违反开放封闭原则。<br>Liskov替换原则能够保证系统具有良好的拓展性，同时实现基于多态的抽象机制，能够减少代码冗余，避免运行期的类型判别。  </p><h1 id="依赖倒置原则（Dependecy-Inversion-Principle）"><a href="#依赖倒置原则（Dependecy-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependecy-Inversion Principle）"></a>依赖倒置原则（Dependecy-Inversion Principle）</h1><p>其核心思想是：依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；抽象不依赖于具体，具体依赖于抽象。<br>我们知道，依赖一定会存在于类与类、模块与模块之间。当两个模块之间存在紧密的耦合关系时，最好的方法就是分离接口和实现：在依赖之间定义一个抽象的接口使得高层模块调用接口，而底层模块实现接口的定义，以此来有效控制耦合关系，达到依赖于抽象的设计目标。<br>抽象的稳定性决定了系统的稳定性，因为抽象是不变的，依赖于抽象是面向对象设计的精髓，也是依赖倒置原则的核心。<br>依赖于抽象是一个通用的原则，而某些时候依赖于细节则是在所难免的，必须权衡在抽象和具体之间的取舍，方法不是一层不变的。依赖于抽象，就是对接口编程，不要对实现编程。  </p><h1 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface-Segregation Principle）"></a>接口隔离原则（Interface-Segregation Principle）</h1><p>其核心思想是：使用多个小的专门的接口，而不要使用一个大的总接口。<br>具体而言，接口隔离原则体现在：接口应该是内聚的，应该避免“胖”接口。一个类对另外一个类的依赖应该建立在最小的接口上，不要强迫依赖不用的方法，这是一种接口污染。  </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是5个基本的面向对象设计原则，它们就像面向对象程序设计中的金科玉律，遵守它们可以使我们的代码更加鲜活，易于复用，易于拓展，灵活优雅。不同的设计模式对应不同的需求，而设计原则则代表永恒的灵魂，需要在实践中时时刻刻地遵守。就如ARTHUR J.RIEL在那边《OOD启示录》中所说的：“你并不必严格遵守这些原则，违背它们也不会被处以宗教刑罚。但你应当把这些原则看做警铃，若违背了其中的一条，那么警铃就会响起。”</p>]]></content>
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>多渠道打包</title>
      <link href="/2018/05/08/%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/"/>
      <url>/2018/05/08/%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<h1 id="1-多渠道打包（gradle）"><a href="#1-多渠道打包（gradle）" class="headerlink" title="1.多渠道打包（gradle）"></a>1.多渠道打包（gradle）</h1><h2 id="1-替换channel"><a href="#1-替换channel" class="headerlink" title="1.替换channel"></a>1.替换channel</h2><p>1.在AndroidManifest.xml中添加占位符(友盟统计渠道)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">android:name=&quot;MTA_CHANNEL&quot;</span><br><span class="line">android:value=&quot;$&#123;MTA_CHANNEL_VALUE&#125;&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>2.在app的build.gradle中添加代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">productFlavors &#123;//需要哪些渠道都写进来</span><br><span class="line">        baidu &#123;&#125;</span><br><span class="line">        _91 &#123;&#125;//不可使用数字开头</span><br><span class="line">        wandoujia &#123;&#125;</span><br><span class="line">        xiaomi &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //批量处理</span><br><span class="line">    productFlavors.all &#123;//替换在AndroidManifest.xml中的$&#123;MTA_CHANNEL_VALUE&#125;</span><br><span class="line">        flavor -&gt; flavor.manifestPlaceholders = [MTA_CHANNEL_VALUE: name]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>3.打包<br>build -&gt; Generate Signed APK<br><img src="/2018/05/08/多渠道打包/1.png" alt="全选Flavors"><br>打出来的包位置<br><img src="/2018/05/08/多渠道打包/2.png" alt="全选Flavors">  </p><h2 id="2-更改包名"><a href="#2-更改包名" class="headerlink" title="2.更改包名"></a>2.更改包名</h2><p>当需要更改包名，在productFlavors中指定不同的applicationId即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">baidu &#123;</span><br><span class="line">applicationId=&quot;com.aimerd.channel.baidu&quot;</span><br><span class="line">&#125;</span><br><span class="line">_91 &#123;</span><br><span class="line">applicationId=&quot;com.aimerd.channel.jiuyi&quot;</span><br><span class="line">&#125;</span><br><span class="line">wandoujia &#123;</span><br><span class="line">applicationId=&quot;com.aimerd.channel.wandoujia&quot;</span><br><span class="line">&#125;</span><br><span class="line">xiaomi &#123;</span><br><span class="line">applicationId=&quot;com.aimerd.channel.xiaomi&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//  批量处理</span><br><span class="line">productFlavors.all &#123;</span><br><span class="line">flavor -&gt; flavor.manifestPlaceholders = [MTA_CHANNEL_VALUE: name]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-生成不同应用名称和图标"><a href="#3-生成不同应用名称和图标" class="headerlink" title="3.生成不同应用名称和图标"></a>3.生成不同应用名称和图标</h2><p>我们以baidu为例，在app模块src目录下，新建一个”baidu”目录（名字和productFlavors中定义的要一致）<br>目录结构<br><img src="/2018/05/08/多渠道打包/3.png" alt="baidu目录结构  "><br>如果需要换图标，只需更换ic_launcher.png文件即可。  </p><p>把values下strings.xml中的”app_name”改成自己想要的应用名称。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;string name=&quot;app_name&quot;&gt;Dragger2_baidu&lt;/string&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p><h1 id="2-多渠道打包（美团替换文件）"><a href="#2-多渠道打包（美团替换文件）" class="headerlink" title="2.多渠道打包（美团替换文件）"></a>2.多渠道打包（美团替换文件）</h1><p>引用 美团Android自动化之旅—生成渠道包 <a href="https://tech.meituan.com/mt-apk-packaging.html" title="美团Android自动化之旅—生成渠道包" target="_blank" rel="noopener">https://tech.meituan.com/mt-apk-packaging.html</a></p><p>工具包及使用 <a href="https://gitee.com/welau/multichannel_packaging_channel" title="welau utils" target="_blank" rel="noopener">https://gitee.com/welau/multichannel_packaging_channel</a></p><p>复制ChannelUtils到项目中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String aDefault = ChannelUtils.getChannel(this);</span><br><span class="line">Toast.makeText(this,aDefault,Toast.LENGTH_SHORT).show();//即可获取到channel</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>robolectric-测试</title>
      <link href="/2018/05/08/robolectric-%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/05/08/robolectric-%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>robolectric的最大特别是运行测试程序时不需要设备或者模拟器，在电脑中进行就可以了，自然测试程序的运行效率可以大大提升。</p>]]></content>
      
      <categories>
          
          <category> android 测试 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SmartRefreshLayout 刷新加载数据（listview，recycleview，webivew...）</title>
      <link href="/2018/04/12/SmartRefreshLayout-%E5%88%B7%E6%96%B0%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%EF%BC%88listview%EF%BC%8Crecycleview%EF%BC%8Cwebivew-%EF%BC%89/"/>
      <url>/2018/04/12/SmartRefreshLayout-%E5%88%B7%E6%96%B0%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%EF%BC%88listview%EF%BC%8Crecycleview%EF%BC%8Cwebivew-%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>引用 <a href="https://github.com/scwang90/SmartRefreshLayout" title="SmartRefreshLayout" target="_blank" rel="noopener">SmartRefreshLayout</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>正如名字所说，SmartRefreshLayout是一个“聪明”或者“智能”的下拉刷新布局，由于它的“智能”，它不只是支持所有的View，还支持多层嵌套的视图结构。它继承自ViewGroup 而不是FrameLayout或LinearLayout，提高了性能。 也吸取了现在流行的各种刷新布局的优点，包括谷歌官方的 SwipeRefreshLayout，其他第三方的 Ultra-Pull-To-Refresh、TwinklingRefreshLayout 。还集成了各种炫酷的 Header 和 Footer。 SmartRefreshLayout的目标是打造一个强大，稳定，成熟的下拉刷新框架，并集成各种的炫酷、多样、实用、美观的Header和Footer。</p><h1 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h1><ol><li>支持多点触摸</li><li>支持淘宝二楼和二级刷新</li><li>支持嵌套多层的视图结构 Layout (LinearLayout,FrameLayout…)</li><li>支持所有的 View（AbsListView、RecyclerView、WebView….View）</li><li>支持自定义并且已经集成了很多炫酷的 Header 和 Footer.</li><li>支持和ListView的无缝同步滚动 和 CoordinatorLayout 的嵌套滚动 .</li><li>支持自动刷新、自动上拉加载（自动检测列表惯性滚动到底部，而不用手动上拉）.</li><li>支持自定义回弹动画的插值器，实现各种炫酷的动画效果.</li><li>支持设置主题来适配任何场景的App，不会出现炫酷但很尴尬的情况.</li><li>支持设多种滑动方式：平移、拉伸、背后固定、顶层固定、全屏</li><li>支持所有可滚动视图的越界回弹  </li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.scwang.smartrefresh:SmartRefreshLayout:1.1.0-alpha-3&apos;</span><br><span class="line">compile &apos;com.scwang.smartrefresh:SmartRefreshHeader:1.1.0-alpha-3&apos;//没有使用特殊Header，可以不加这行</span><br></pre></td></tr></table></figure><h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;com.scwang.smartrefresh.layout.SmartRefreshLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:id=&quot;@+id/refreshLayout&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id=&quot;@+id/recyclerView&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:overScrollMode=&quot;never&quot;</span><br><span class="line">        android:background=&quot;#fff&quot; /&gt;</span><br><span class="line">&lt;/com.scwang.smartrefresh.layout.SmartRefreshLayout&gt;</span><br></pre></td></tr></table></figure><h2 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">RefreshLayout refreshLayout = (RefreshLayout)findViewById(R.id.refreshLayout);</span><br><span class="line">refreshLayout.setOnRefreshListener(new OnRefreshListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onRefresh(RefreshLayout refreshlayout) &#123;</span><br><span class="line">        new Handler() &#123;</span><br><span class="line">                &#125;.postDelayed(new Runnable() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() &#123;</span><br><span class="line">                        refreshLayout.finishRefresh();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 2000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">refreshLayout.setOnLoadMoreListener(new OnLoadMoreListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onLoadMore(RefreshLayout refreshlayout) &#123;</span><br><span class="line">        new Handler() &#123;</span><br><span class="line">                &#125;.postDelayed(new Runnable() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() &#123;</span><br><span class="line">                        refreshLayout.finishLoadMore();</span><br><span class="line">                        //adapter.update(getList());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 2000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="属性设置"><a href="#属性设置" class="headerlink" title="属性设置"></a>属性设置</h2><p><a href="https://github.com/scwang90/SmartRefreshLayout/blob/master/art/md_property.md" title="属性" target="_blank" rel="noopener">属性设置</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">refreshLayout.setPrimaryColorsId(R.color.colorPrimary, android.R.color.white);//颜色设置</span><br><span class="line">refreshLayout.setDragRate(0.5f);//阻尼效果</span><br><span class="line">refreshLayout.setHeaderHeight(60);//Header高度dp</span><br><span class="line">refreshLayout.setFooterHeight(40);//Footer高度dp</span><br></pre></td></tr></table></figure></p><h2 id="Header-Footer-设置"><a href="#Header-Footer-设置" class="headerlink" title="Header Footer 设置"></a>Header Footer 设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//设置指定的 Header 和 Footer</span><br><span class="line">//设置 Header 为 贝塞尔雷达 样式</span><br><span class="line">refreshLayout.setRefreshHeader(new ClassicsHeader(this).setTimeFormat(new SimpleDateFormat(&quot;上次更新 HH:mm:ss&quot;)));</span><br><span class="line">//设置 Footer 为 球脉冲 样式</span><br><span class="line">refreshLayout.setRefreshFooter(new BallPulseFooter(this));</span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="/2018/04/12/SmartRefreshLayout-刷新加载数据（listview，recycleview，webivew-）/1.gif" alt=""></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>单例模式</title>
      <link href="/2018/03/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/03/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>因程序需要，有时候我们只需要某个类同时保留一个对象，不希望有更多对象，此时，需要用单例模式设计。<br>单例模式特点：</p><ol><li>只能有一个实例</li><li>单例类必须创建自己唯一的实例</li><li>单例类必须向其他对象提供这一实例</li></ol><h1 id="单例模式实现方式"><a href="#单例模式实现方式" class="headerlink" title="单例模式实现方式"></a>单例模式实现方式</h1><h2 id="1-饿汉模式"><a href="#1-饿汉模式" class="headerlink" title="1. 饿汉模式"></a>1. 饿汉模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//饿汉模式</span><br><span class="line">private static SingletonDemo singletonDemo = new SingletonDemo();</span><br><span class="line">private SingletonDemo() &#123;&#125;</span><br><span class="line">public static SingletonDemo getInstance()&#123;</span><br><span class="line">return singletonDemo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>在运行这个类的时候进行一次loading，之后直接访问</em></p><h2 id="2-懒汉模式"><a href="#2-懒汉模式" class="headerlink" title="2. 懒汉模式"></a>2. 懒汉模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//懒汉模式</span><br><span class="line">private static SingletonDemo singletonDemo;</span><br><span class="line">private SingletonDemo() &#123;&#125;</span><br><span class="line">public static SingletonDemo getInstance()&#123;</span><br><span class="line">if (null == singletonDemo)&#123;</span><br><span class="line">singletonDemo = new SingletonDemo();</span><br><span class="line">&#125;</span><br><span class="line">return singletonDemo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>线程不安全</em></p><h2 id="3-线程安全的懒汉模式"><a href="#3-线程安全的懒汉模式" class="headerlink" title="3. 线程安全的懒汉模式"></a>3. 线程安全的懒汉模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private static SingletonDemo singletonDemo;</span><br><span class="line">private SingletonDemo() &#123;&#125;</span><br><span class="line">public synchronized static SingletonDemo getInstance()&#123;</span><br><span class="line">if (null == singletonDemo)&#123;</span><br><span class="line">singletonDemo = new SingletonDemo();</span><br><span class="line">&#125;</span><br><span class="line">return singletonDemo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>使用synchronized线程安全了，但并发时这个锁占用了额外的资源，效率低</em></p><h2 id="4-DCL-双重校验锁法"><a href="#4-DCL-双重校验锁法" class="headerlink" title="4. DCL(双重校验锁法)"></a>4. DCL(双重校验锁法)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private volatile static SingletonDemo singletonDemo;//声明成 volatile</span><br><span class="line">private SingletonDemo() &#123;&#125;</span><br><span class="line">public static SingletonDemo getInstance()&#123;</span><br><span class="line">if (null == singletonDemo)&#123;//第一次校验</span><br><span class="line">synchronized (SingletonDemo.class)&#123;</span><br><span class="line">if (null == singletonDemo)&#123;//第二次校验</span><br><span class="line">singletonDemo = new SingletonDemo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return singletonDemo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两次判断,这段代码看起来很完美，很可惜，它是有问题。主要在于instance = new Singleton()这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</p><ol><li>给 instance 分配内存</li><li>调用 Singleton 的构造函数来初始化成员变量</li><li>将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了)  </li></ol><p>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。<br>我们只需要将 instance 变量声明成 volatile 就可以了。*</p><h2 id="5-静态内部类"><a href="#5-静态内部类" class="headerlink" title="5. 静态内部类"></a>5. 静态内部类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//静态内部类</span><br><span class="line">private SingletonDemo() &#123;&#125;</span><br><span class="line">private static class SingletonHolder&#123;</span><br><span class="line">private static SingletonDemo singletonDemo = new SingletonDemo();</span><br><span class="line">&#125;</span><br><span class="line">public static SingletonDemo getInstance()&#123;</span><br><span class="line">return SingletonHolder.singletonDemo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>好处：内部类不会再类加载的时候就加载，而是在调用getInstance()方法时才加载，达到了懒汉模式的效果，而这种方式又是线程安全的</em></p><h2 id="6-枚举"><a href="#6-枚举" class="headerlink" title="6. 枚举"></a>6. 枚举</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public enum SingletonDemo2 &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        Log.d(&quot;TAG&quot;,&quot;枚举法单例&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//调用方法</span><br><span class="line">SingletonDemo2.INSTANCE.test();</span><br></pre></td></tr></table></figure><p><em>好处：①自由序列化    ②保证只有一个实例    ③线程安全</em></p><p><strong>推荐使用4 5 6这三种方式</strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>EventBus 使用</title>
      <link href="/2018/03/06/EventBus-%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/03/06/EventBus-%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>EventBus是一款针对Android优化的发布/订阅事件总线。简化了应用程序内各组件间、组件与后台线程间的通信。优点是开销小，代码更优雅，以及将发送者和接收者解耦。如果Activity和Activity进行交互还好说，如果Fragment和Fragment进行交互着实令人头疼，我们会使用广播来处理，但是使用广播稍显麻烦并且效率也不高，如果传递的数据是实体类需要序列化，那么很显然成本会有点高。今天我们就来学习下EventBus3.0的使用方法。</p><h1 id="EventBus的三要素"><a href="#EventBus的三要素" class="headerlink" title="EventBus的三要素"></a>EventBus的三要素</h1><ol><li>Event:事件，可以是任意类型的对象</li><li>Subscriber:事件订阅者，事件处理的方法可以随便命名，需要价格注解@Subscribe,并且要指定线程模型（默认为POSTING）</li><li>Publisher：事件发布者，EventBus.getDefault().post()</li></ol><h1 id="EventBus的5种ThreadMode-线程模型"><a href="#EventBus的5种ThreadMode-线程模型" class="headerlink" title="EventBus的5种ThreadMode(线程模型)"></a>EventBus的5种ThreadMode(线程模型)</h1><ol><li>POSTING(默认)：事件在哪个线程发出，事件就在哪个线程处理</li><li>MAIN：事件处理会在UI线程中执行。事件处理时间不能太长（ANR），阻塞式</li><li>MAIN_ORDERED:事件处理会在UI线程中执行,非阻塞式</li><li>BACKGROUND:事件发出在UI线程时，处理在新线程中运行；事件发出在子线程，处理在该子线程</li><li>AYSNC:无论事件在哪个线程发出，处理都会在新建的子线程中运行</li></ol><h1 id="EventBus基本用法"><a href="#EventBus基本用法" class="headerlink" title="EventBus基本用法"></a>EventBus基本用法</h1><ol><li><p>导包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;org.greenrobot:eventbus:3.1.1&apos;</span><br></pre></td></tr></table></figure></li><li><p>自定义一个事件类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class MessageEvent &#123;</span><br><span class="line"></span><br><span class="line">    private String msg;</span><br><span class="line"></span><br><span class="line">    public MessageEvent(String msg) &#123;</span><br><span class="line">        this.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMsg() &#123;</span><br><span class="line">        return msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在需要订阅事件的地方注册事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault.regist(this);</span><br></pre></td></tr></table></figure></li><li><p>取消事件订阅</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault.unregist(this);</span><br></pre></td></tr></table></figure></li><li><p>发送事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().post(new MessageEvent(&quot;发送事件&quot;));</span><br></pre></td></tr></table></figure></li><li><p>处理事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Subscribe(threadMode = ThreadMode.MAIN_ORDERED)</span><br><span class="line">public void XXX(MessageEvent messageEvent) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="EventBus-应用"><a href="#EventBus-应用" class="headerlink" title="EventBus 应用"></a>EventBus 应用</h1><ol><li>添加依赖</li><li>定义消息事件类</li><li><p>注册，取消订阅事件，事件处理事件 （都在MainActivity类中，就写一起了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private TextView tv;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        EventBus.getDefault().register(this);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        tv = findViewById(R.id.tv);</span><br><span class="line">        tv.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                startActivity(new Intent(MainActivity.this, SecActivity.class));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        EventBus.getDefault().unregister(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Subscribe(threadMode = ThreadMode.MAIN_ORDERED)</span><br><span class="line">    public void cal(MessageEvent messageEvent)&#123;</span><br><span class="line">        tv.setText(messageEvent.getMsg());</span><br><span class="line">        Toast.makeText(this,messageEvent.getMsg(),Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>事件发布(为了简写：SecActivity 进入就发布)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class SecActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        EventBus.getDefault().post(new MessageEvent(&quot;SecActivity ~&quot;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>看看效果：<br><img src="/2018/03/06/EventBus-使用/1.gif" alt=""><br>点击MainActivity的“helloworld” 进入 SecActivity，SecActivity onCreate（）中 post发布事件，MainActivity cal()执行，“helloworld”被改成“SecActivity ~”，同时Toast “SecActivity ~”</p><h1 id="粘性事件"><a href="#粘性事件" class="headerlink" title="粘性事件"></a>粘性事件</h1><p>除了上面讲的普通事件外，EventBus还支持发送黏性事件，就是在发送事件之后再订阅该事件也能收到该事件，跟黏性广播类似。为了验证粘性事件我们修改以前的代码：</p><h3 id="订阅粘性事件"><a href="#订阅粘性事件" class="headerlink" title="订阅粘性事件"></a>订阅粘性事件</h3><p>在MainActivity中我们将注册事件移到到button的点击事件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bt_subscription.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                //注册事件</span><br><span class="line">                EventBus.getDefault().register(MainActivity.this);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="订阅者处理粘性事件"><a href="#订阅者处理粘性事件" class="headerlink" title="订阅者处理粘性事件"></a>订阅者处理粘性事件</h3><p>在MainActivity中新写一个方法用来处理粘性事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Subscribe(threadMode = ThreadMode.POSTING，sticky = true)</span><br><span class="line">    public void ononMoonStickyEvent(MessageEvent messageEvent)&#123;</span><br><span class="line">        tv_message.setText(messageEvent.getMessage());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="发送黏性事件"><a href="#发送黏性事件" class="headerlink" title="发送黏性事件"></a>发送黏性事件</h3><p>在SecondActivity中发送粘性事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().postSticky(new MessageEvent(&quot;粘性事件&quot;));</span><br></pre></td></tr></table></figure></p><h1 id="混淆"><a href="#混淆" class="headerlink" title="混淆"></a>混淆</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-keepattributes *Annotation*</span><br><span class="line">-keepclassmembers class * &#123;</span><br><span class="line">    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line">-keep enum org.greenrobot.eventbus.ThreadMode &#123; *; &#125;</span><br><span class="line"> </span><br><span class="line"># Only required if you use AsyncExecutor</span><br><span class="line">-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent &#123;</span><br><span class="line">    &lt;init&gt;(java.lang.Throwable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Retrofit-RxJava-＋-OkHttp基础篇</title>
      <link href="/2018/03/06/Retrofit-RxJava-%EF%BC%8B-OkHttp%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2018/03/06/Retrofit-RxJava-%EF%BC%8B-OkHttp%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Retrofit: Retrofit是Square 公司开发的一款正对Android 网络请求的框架。底层基于OkHttp 实现，OkHttp 已经得到了google 官方的认可。<a href="http://square.github.io/retrofit/" title="Retrofit官网" target="_blank" rel="noopener">Retrofit官网</a></p><p>OkHttp: 也是Square 开源的网络请求库</p><p>RxJava:RxJava 在 GitHub 主页上的自我介绍是 “a library for composing asynchronous and event-based programs using observable sequences for the Java VM”（一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库）。这就是 RxJava ，概括得非常精准。总之就是让异步操作变得非常简单。</p><p>各自的职责：Retrofit 负责请求的数据和请求的结果，使用接口的方式呈现，OkHttp 负责请求的过程，RxJava 负责异步，各种线程之间的切换。</p><p>RxJava + Retrofit + okHttp 已成为当前Android 网络请求最流行的方式。</p><h1 id="Retrofit-写一个网络请求"><a href="#Retrofit-写一个网络请求" class="headerlink" title="Retrofit 写一个网络请求"></a>Retrofit 写一个网络请求</h1><p>以获取豆瓣 Top250 榜单为例，地址：<a href="https://api.douban.com/v2/movie/" target="_blank" rel="noopener">https://api.douban.com/v2/movie/</a></p><ol><li><p>导包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//rxjava相关依赖</span><br><span class="line">compile &apos;io.reactivex:rxjava:1.2.1&apos;</span><br><span class="line">compile &apos;io.reactivex:rxandroid:1.2.1&apos;</span><br><span class="line">//retrofit相关依赖</span><br><span class="line">compile &apos;com.squareup.retrofit2:retrofit:2.1.0&apos;</span><br><span class="line">compile &apos;com.squareup.retrofit2:converter-gson:2.1.0&apos;</span><br><span class="line">compile &apos;com.squareup.retrofit2:adapter-rxjava:2.1.0&apos;</span><br><span class="line">//okhttp相关依赖</span><br><span class="line">compile &apos;com.squareup.okhttp3:okhttp:3.4.1&apos;</span><br><span class="line">compile &apos;com.squareup.okhttp3:logging-interceptor:3.4.1&apos;</span><br></pre></td></tr></table></figure></li><li><p>创建一个Retrofit实例，并且完成相关的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = new Retrofit.Builder()</span><br><span class="line">                .baseUrl(BASE_URL)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure></li></ol><p><em>说明：配置了接口的baseurl和一个converter，GsonConverterFactory是默认的Gson转换器，也支持其他转换器</em></p><h2 id="创建接受结果的javabean"><a href="#创建接受结果的javabean" class="headerlink" title="创建接受结果的javabean"></a>创建接受结果的javabean</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MovieSubject &#123;</span><br><span class="line"></span><br><span class="line">    public String title;</span><br><span class="line">    public String start;</span><br><span class="line">    public String total;</span><br><span class="line">    public String count;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;MovieSubject&#123;&quot; +</span><br><span class="line">                &quot;title=&apos;&quot; + title + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, start=&apos;&quot; + start + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, total=&apos;&quot; + total + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, count=&apos;&quot; + count + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建一个接口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface Service &#123;</span><br><span class="line"></span><br><span class="line">    @GET(&quot;top250&quot;)</span><br><span class="line">    Call&lt;MovieSubject&gt; getTop250(@Query(&quot;start&quot;) int start,@Query(&quot;count&quot;) int count);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">*说明：定义一个方法getTop250，使用get请求方式（@GET标签），标签后面是这个接口的尾址top250，完整的地址应该是baseUrl+尾址，参数使用@Query标签，如果参数多的话可以使用@QueryMap标签，接受一个Map*</span><br><span class="line"></span><br><span class="line">## 用Retrofit创建接口实例MoveService，并且调用接口中的方法进行网络请求 ##</span><br></pre></td></tr></table></figure></li></ol><p>//retrofit创建接口实例<br>Service service = retrofit.create(Service.class);<br>//调用getTop250方法<br>Call<moviesubject> top250 = service.getTop250(0, 5);<br>//进行网络请求<br>top250.enqueue(new Callback<moviesubject>() {<br>    @Override<br>    public void onResponse(Call<moviesubject> call, Response<moviesubject> response) {<br>        Log.d(“TAG”,”onResponse: “+response.body().toString());<br>    }</moviesubject></moviesubject></moviesubject></moviesubject></p><pre><code>@Overridepublic void onFailure(Call&lt;MovieSubject&gt; call, Throwable t) {        Log.d(&quot;TAG&quot;,&quot;onFailure&quot;);    }});</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># POST请求 #</span><br><span class="line">上面的是GET请求，下面将它换成POST请求  </span><br><span class="line">修改MoveService类</span><br></pre></td></tr></table></figure><p>public interface Service {</p><pre><code>@FormUrlEncoded //使用POST必须加上此标签@POST(&quot;top250&quot;)Call&lt;MovieSubject&gt; getTop250(@Field(&quot;start&quot;) int start, @Field(&quot;count&quot;) int count);//@Query 改成了 @Field</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 配合RxJava使用 #</span><br><span class="line">1. 更改定义的接口，返回值Call-&gt;Observable</span><br></pre></td></tr></table></figure></p><p>public interface Service {</p><pre><code>@GET(&quot;top250&quot;)Observable&lt;MovieSubject&gt; getTop250(@Query(&quot;start&quot;) int start, @Query(&quot;count&quot;) int count);</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. 创建Retrofit时添加代码</span><br></pre></td></tr></table></figure></p><p>addCallAdapterFactory(RxJavaCallAdapterFactory.create())<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3. Subscriber订阅</span><br></pre></td></tr></table></figure></p><p>//retrofit创建接口实例<br>Service service = retrofit.create(Service.class);<br>service.getTop250(0,5)<br>    .subscribeOn(Schedulers.io())<br>    .observeOn(AndroidSchedulers.mainThread())<br>    .subscribe(new Subscriber<moviesubject>() {<br>        @Override<br>        public void onCompleted() {<br>            Log.d(TAG,”onCompleted”);<br>        }</moviesubject></p><pre><code>    @Override    public void onError(Throwable e) {        Log.d(TAG,&quot;onError: &quot;+e.toString());    }    @Override    public void onNext(MovieSubject movieSubject) {        Log.d(TAG,&quot;onNext: &quot;+movieSubject.title);    }});</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*以上加入RxJava后的网络请求，返回的不再是Call，而是一个Observable，在Activity或Fragment中传入一个Subscriber建立订阅关系，就可以在onNext中处理结果了。  </span><br><span class="line">RxJava的好处是处理线程间的切换*</span><br><span class="line"></span><br><span class="line"># 加入OkHttp配置 #</span><br><span class="line">通过OkHttpClient可以配置很多东西，比如超时，缓存，拦截器</span><br></pre></td></tr></table></figure><p>OkHttpClient.Builder builder = new OkHttpClient.Builder()<br>    .connectTimeout(60, TimeUnit.SECONDS);</p><p>//拦截器<br>builder.addInterceptor(new BasicParamsInterceptop());<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 拦截器(应用拦截器添加公共参数) ##</span><br><span class="line">1. 新建类BasicParamsInterceptop implements Interceptor实现intercept方法</span><br><span class="line">2. 添加公共参数参数</span><br></pre></td></tr></table></figure></p><p>@Override<br>public Response intercept(Chain chain) throws IOException {<br>    Request request = chain.request();<br>    String method = request.method();<br>    Log.d(TAG,”method :”+method);</p><pre><code>//添加headderrequest = request.newBuilder()            .addHeader(&quot;channel&quot;,&quot;android&quot;).build();//GET请求if (method.equals(&quot;GET&quot;)){    HttpUrl httpUrl = request.url().newBuilder()                        .addQueryParameter(&quot;version&quot;, &quot;version&quot;)                        .build();    request = request.newBuilder().url(httpUrl).build();}//POST请求if(method.equals(&quot;POST&quot;)){    if (request.body() instanceof FormBody){        FormBody.Builder builder = new FormBody.Builder();        //把原来的参数添加到新的构造器        FormBody request_formBody = (FormBody) request.body();        for (int i=0;i&lt;request_formBody.size();i++){            builder.addEncoded(request_formBody.encodedName(i),request_formBody.encodedValue(i));        }        //添加新的参数        builder.add(&quot;type&quot;,&quot;app&quot;);        request = request.newBuilder().post(builder.build()).build();    }    //打印参数    FormBody body = (FormBody) request.body();    for (int i=0;i&lt;body.size();i++){        Log.d(TAG,&quot;new_body :&quot;+body.encodedName(i));    }}return chain.proceed(request);</code></pre><p>}<br>```</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>git 使用</title>
      <link href="/2017/12/21/git-%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/12/21/git-%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="上传本地代码"><a href="#上传本地代码" class="headerlink" title="上传本地代码"></a>上传本地代码</h1><p>1.新建repository:<br>2.把github上面的仓库克隆到本地<br>git clone <a href="https://github.com/xxx/xxx.git（https://github.com/xxx/xxx.git仓库地址）" target="_blank" rel="noopener">https://github.com/xxx/xxx.git（https://github.com/xxx/xxx.git仓库地址）</a><br>这个步骤以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名<br>然后把要上传的项目复制到本地项目文件夹中<br>3.git add .<br>4.git commit  -m  “提交信息”<br>5.git pull origin master<br>6.git push -u origin master  </p><h1 id="更新代码"><a href="#更新代码" class="headerlink" title="更新代码"></a>更新代码</h1><p>1.git status(查看当前的git仓库状态)<br>2.git add *(更新全部)<br>3.git commit -m “更新说明”<br>4.git pull(先git pull,拉取当前分支最新代码)<br>5.git push origin master(push到远程master分支上)  </p><p><em>参考</em><br><a href="https://www.cnblogs.com/zlxbky/p/7727895.html" target="_blank" rel="noopener">上传本地代码及更新代码到GitHub教程</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>RxJava + Retrofit 完成网络请求</title>
      <link href="/2017/11/29/RxJava-Retrofit-%E5%AE%8C%E6%88%90%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
      <url>/2017/11/29/RxJava-Retrofit-%E5%AE%8C%E6%88%90%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h1 id="RxJava使用"><a href="#RxJava使用" class="headerlink" title="RxJava使用"></a>RxJava使用</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>一个在Java VM上使用可观测的序列来组成异步的,基于事件的程序的库.<br>简单说它就是一个实现异步操作的库.</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ol><li>观察者: 监视被观察者的行为,当被观察组某个状态改变的时候会通知观察者,观察组执行对应的操作;</li><li>被观察者: 被监视的对象</li><li>订阅(或注册): 将观察者和被观察者建立联系</li></ol><p>例子: 按钮点击事件(OnClickListener中的onClick()事件)</p><ol><li>观察者: OnClickListener;  </li><li>被观察者: Button;  </li><li>订阅(或注册): setOnClickListener();  </li></ol><p>对应RxJava中</p><ol><li>观察者: Observer;</li><li>被观察者: Observable;</li><li>订阅(或注册): subscribe;</li></ol><h3 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h3><p>Observer 即观察者,它决定事件触发的时候将有怎样的行为.<br>RxJava 观察者的事件回调方法除了普通事件onNext()[相当于onClick()/onEvent()]之外,还定义了两个特殊的事件:onCompleted()和onError().</p><ol><li>onCompleted() 事件队列完结.RxJava不仅把每个事件单独处理,还会把它们看成一个队列.RxJava规定,当不会再有新的onNext()发出时,需要触发onCompleted()方法作为标示.</li><li>onError() 事件队列异常.在事件处理过程中出现异常时,onError()会被触发,同时队列自动终止,不允许再有事件发出.</li><li>在一个正确运行的事件序列中,onCompleted()和onError()有且只有一个,并且是事件序列中的最后一个.onCompleted()和onError()在队列中只会调用其中一个.</li></ol><h3 id="被观察者"><a href="#被观察者" class="headerlink" title="被观察者"></a>被观察者</h3><p>Observable 即被观察者,它决定什么时候触发事件以及触发怎样的事件.可以使用create(),just(T…),from(T[]),from(Iterable&lt;? extends T&gt;)来创建一个Observable,并为它定义事件触发规则.</p><h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><p>创建了Observable 和 Observer之后,再用subscribe()方法将他们连接起来</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1.导包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;io.reactivex:rxjava:1.0.14&apos;</span><br><span class="line">compile &apos;io.reactivex:rxandroid:1.0.1</span><br></pre></td></tr></table></figure></p><p>2.创建一个观察者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Observer&lt;String&gt; observer = new Observer&lt;String&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void onCompleted() &#123;</span><br><span class="line">Log.i(TAG, &quot;Completed&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void onError(Throwable e) &#123;</span><br><span class="line">Log.i(TAG, &quot;Error&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void onNext(String s) &#123;</span><br><span class="line">Log.i(TAG, s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>3.创建被观察者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable observable1 = Observable.create(new  Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void call(Subscriber&lt;? super String&gt; subscriber) &#123;</span><br><span class="line">subscriber.onNext(&quot;Hello&quot;);</span><br><span class="line">subscriber.onNext(&quot;Wrold&quot;);</span><br><span class="line">subscriber.onCompleted();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>4.订阅<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">observable1.subscribe(observer);</span><br></pre></td></tr></table></figure></p><p>5.Observable其它几种创建方法</p><ol><li><p>Observable.just()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Observable observable = Observable.just(&quot;hi&quot;, &quot;le&quot;, &quot;ho&quot;);</span><br></pre></td></tr></table></figure></li><li><p>Observable.from()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">list.add(&quot;Hellow&quot;);</span><br><span class="line">list.add(&quot;Wrold&quot;);</span><br><span class="line">String [] words = &#123;&quot;Hello&quot;, &quot;World&quot;&#125;;</span><br><span class="line">Observable observable3 = Observable.from(words|list);</span><br></pre></td></tr></table></figure></li></ol><h2 id="RxJava-Action-使用"><a href="#RxJava-Action-使用" class="headerlink" title="RxJava Action 使用"></a>RxJava Action 使用</h2><p>回顾上节知识,介绍RxJava基本用法<br>例:分别打印”hello” “world”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">.subscribe(new Subscriber&lt;String&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void onCompleted() &#123;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void onError(Throwable e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void onNext(String s) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>从上面可以看出我们只用了onNext(obj),还有两个重新的onError()和onCompleted()并没有用到,可是使用Action代替Subscriber.</p><h3 id="Action代替Subscriber"><a href="#Action代替Subscriber" class="headerlink" title="Action代替Subscriber"></a>Action代替Subscriber</h3><p>用Action代替Subscriber<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(&quot;Hello&quot;, &quot;World&quot;)</span><br><span class="line">.subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void call(String s) &#123;</span><br><span class="line">Log.i(TAG, s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="RxJava-转换-map-flatMap"><a href="#RxJava-转换-map-flatMap" class="headerlink" title="RxJava 转换 -map -flatMap"></a>RxJava 转换 -map -flatMap</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>在使用map之前先了解一个接口: Func1, Func1和上文的Action1相似.Func1和Action1的区别在于,Func1包装的是有返回值的方法.<br>例: 得到多个Studeng对象中的name,保存到nameList中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(student1, student2, student2)</span><br><span class="line">                //使用map进行转换，参数1：转换前的类型，参数2：转换后的类型</span><br><span class="line">                .map(new Func1&lt;Student, String&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public String call(Student i) &#123;</span><br><span class="line">                        String name = i.getName();//获取Student对象中的name</span><br><span class="line">                        return name;//返回name</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void call(String s) &#123;</span><br><span class="line">                        nameList.add(s);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure></p><p>可以看出Observable中原来的参数是Student对象,而最后我们需要的是name,这里使用了map来实现这一转换的过程.map也可以多次使用</p><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p>flatMap是一个比教难理解的一个转换，在这里先假设一个需求，需要打印多个Student所学的课程。这跟之前获取Student的name又不同了，这里先确定一下关系，一个Student类中只有一个name，而一个Student却有多门课程（Course），Student我们可以理解成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 学生类</span><br><span class="line">*/</span><br><span class="line">class Student &#123;</span><br><span class="line">private String name;//姓名</span><br><span class="line">private List&lt;Course&gt; coursesList;//所修的课程</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line">* 课程类</span><br><span class="line">*/</span><br><span class="line">class  Course &#123;</span><br><span class="line">private String name;//课程名</span><br><span class="line">private String id;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如何使用map实现打印所有学生所修的课程名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.from(students)</span><br><span class="line">.flatMap(new Func1&lt;Student, Observable&lt;Course&gt;&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Observable&lt;Course&gt; call(Student student) &#123;</span><br><span class="line">return Observable.from(student.getCoursesList());</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.subscribe(new Action1&lt;Course&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void call(Course course) &#123;</span><br><span class="line">Log.i(TAG, course.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="RxJava-线程控制-Scheduler"><a href="#RxJava-线程控制-Scheduler" class="headerlink" title="RxJava 线程控制 - Scheduler"></a>RxJava 线程控制 - Scheduler</h2><p>由Observable发起事件,经过中间的处理后由Observer消费,之前的代码事件发起和消费都是在同一个线程中执行,也就是说之前我们使用的RxJava是同步的<br>而观察者模式本身的目的是后台处理,将处理结果回调给前台<br>上例中flatMap处理是在主线程中进行的,若flatMap中有耗时的操作,这样会导致主线程阻塞  </p><p>Scheduler: 线程控制器,可以指定每一段代码在什么样的线程中执行<br>例: 在新的线程中发起事件,在主线程中消费<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(&quot;Hello&quot;, &quot;Word&quot;)</span><br><span class="line">.subscribeOn(Schedulers.newThread())//指定 subscribe() 发生在新的线程</span><br><span class="line">.observeOn(AndroidSchedulers.mainThread())// 指定 Subscriber 的回调发生在主线程</span><br><span class="line">.subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void call(String s) &#123;</span><br><span class="line">Log.i(TAG, s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>上面用到了subscribeOn()发起,observeOn()消费<br>subscribeOn()：指定subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程.<br>observeOn()：指定Subscriber 所运行在的线程。或者叫做事件消费的线程。  </p><p>多次切换线程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(&quot;hello&quot;,&quot;hi&quot;)</span><br><span class="line">.subscribeOn(Schedulers.newThread())</span><br><span class="line">.observeOn(Schedulers.io())</span><br><span class="line">.filter(new Func1&lt;String, Boolean&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Boolean call(String s) &#123;</span><br><span class="line">Log.d(TAG,&quot;filter thread: &quot;+Thread.currentThread().getId());</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">.subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void call(String s) &#123;</span><br><span class="line">Log.d(TAG,&quot;Thread: &quot;+Thread.currentThread().getId()+&quot;  &quot;+s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>可以看出subserveOn()被调用两次,分别指定fliter处理和subscribe消费的线程<br>如果去掉后面的.observeOn(AndroidSchedulers.mainThread()),那么 .subscribe将会在io线程中执行<br>observeOn()可以多次使用，可以随意变换线程</p><h1 id="Retrofit-使用"><a href="#Retrofit-使用" class="headerlink" title="Retrofit 使用"></a>Retrofit 使用</h1><p>Retrofit是Square公司开发的一个类型安全的Java和Android的REST客户端库(A type-safe HTTP client for Android and Java)<br>RestAPI是一种软件设计风格,服务器作为资源存放地.客户端去请求GET POST PUT DELETE…资源.并且是无状态的,没有session的参与.  </p><p>Retrofit模型如下:<br><img src="/2017/11/29/RxJava-Retrofit-完成网络请求/t1.png" alt=""></p><p>1.POJO或模型实体类: 从服务器获取的JSON数据将被填充到这种类的实例中<br>2.接口: 我们需要创建一个接口来管理像GET POST…请求的URL,这是一个服务类.<br>3.RestAdapter类: 这是一个REST客户端(RestClient)类,retrofit中默认用的是Gson来解析JSON数据,你也可以设置自己的JSON解析器.</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在发起请求时,主要通过Call来封装每一次的请求;<br>调用同步方法时,会使用应用线程来发送请求;<br>调用异步方法时,会通过 OkHttp 的 <strong>Dispatcher</strong> 提供的线程来执行请求.  </p><p><em>Dispatcher: r内部实现了懒加载无边界限制的线程池方式，同时该线程池采用了SynchronousQueue这种阻塞队列。SynchronousQueue每个插入操作必须等待另一个线程的移除操作，同样任何一个移除操作都等待另一个线程的插入操作。显然这是一种快速传递元素的方式，也就是说在这种情况下元素总是以最快的方式从插入者（生产者）传递给移除者（消费者），这在多任务队列中是最快处理任务的方式。</em></p><h2 id="Retrofit-使用-1"><a href="#Retrofit-使用-1" class="headerlink" title="Retrofit 使用"></a>Retrofit 使用</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作:"></a>准备工作:</h3><p>1.添加依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.squareup.retrofit2:retrofit:2.0.2&apos;</span><br><span class="line">compile &apos;com.squareup.retrofit2:converter-gson:2.0.2&apos;</span><br></pre></td></tr></table></figure></p><p>2.添加权限<br>由于是网络请求,需要添加访问网络权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br></pre></td></tr></table></figure></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1.创建实体类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">private String name;</span><br><span class="line">private String age;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public String getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(String age) &#123;</span><br><span class="line">        this.age = ge</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建一个User类, name age<br>POJO的转换推荐使用GsonFormat  </p><p>2.创建Retrofit对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = new Retrofit.Builder()</span><br><span class="line">.addConverterFactory(GsonConverterFactory.create())//解析方法</span><br><span class="line">//这里建议：- Base URL: 总是以/结尾；- @Url: 不要以/开头</span><br><span class="line">.baseUrl(&quot;http://www.xxx.com/&quot;)</span><br><span class="line">.build();</span><br></pre></td></tr></table></figure></p><p>3.接口申明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface Service &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 根据id获取对应的用户数据</span><br><span class="line">     * 如果不需要转换成Json数据,可以用了ResponseBody;</span><br><span class="line">     * @param id</span><br><span class="line">     * @return call</span><br><span class="line">     */</span><br><span class="line">    @GET(&quot;user/&#123;id&#125;&quot;)</span><br><span class="line">    Call&lt;User&gt; getUser(@Path(&quot;id&quot;) String id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.创建访问API的请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Service api = retrofit.create(Service .class);</span><br><span class="line">Call&lt;User&gt; call = api.getUser(&quot;123456&quot;);</span><br></pre></td></tr></table></figure></p><p>5.调用<br>5.1 同步调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">News news = call.execute();</span><br></pre></td></tr></table></figure></p><p>5.2 异步调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">call.enqueue(new Callback&lt;News&gt;()&#123;  </span><br><span class="line">@Override  </span><br><span class="line">public void onResponse(Response&lt;News&gt; response) &#123;  </span><br><span class="line">//成功返回数据后在这里处理，使用response.body();获取得到的结果</span><br><span class="line">News news = response.body();</span><br><span class="line">&#125;  </span><br><span class="line">@Override  </span><br><span class="line">public voidonFailure(Throwable t) &#123;  </span><br><span class="line">//请求失败在这里处理  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>6.取消请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call.cancel();</span><br></pre></td></tr></table></figure></p><h1 id="RxJava-Retrofit-结合使用"><a href="#RxJava-Retrofit-结合使用" class="headerlink" title="RxJava + Retrofit 结合使用"></a>RxJava + Retrofit 结合使用</h1><h2 id="单独使用Retrofit"><a href="#单独使用Retrofit" class="headerlink" title="单独使用Retrofit"></a>单独使用Retrofit</h2><p>1.service接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface MyService &#123;</span><br><span class="line">  @GET(&quot;user/login&quot; )</span><br><span class="line">  Call&lt;UserInfo&gt; login(</span><br><span class="line">          @Query(&quot;username&quot;) String username,</span><br><span class="line">          @Query(&quot;password&quot;) String password</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.获取Call执行网络请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = new Retrofit.Builder()</span><br><span class="line">.addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">.baseUrl(BASE_URL)</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line">MyService service = retrofit.create(MyService.class);</span><br><span class="line"></span><br><span class="line">Call&lt;UserInfo&gt; call = service.login(&quot;1111&quot;, &quot;ssss&quot;);</span><br><span class="line">call.enqueue(new Callback&lt;UserInfo&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void onResponse(Call&lt;UserInfo&gt; call, Response&lt;UserInfo&gt; response) &#123;</span><br><span class="line">//请求成功操作</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void onFailure(Call&lt;UserInfo&gt; call, Throwable t) &#123;</span><br><span class="line">//请求失败操作</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="RxJava-Retrofit-完成网络请求"><a href="#RxJava-Retrofit-完成网络请求" class="headerlink" title="RxJava + Retrofit 完成网络请求"></a>RxJava + Retrofit 完成网络请求</h2><p>1.添加依赖 前四个分别是RxJava、RxAndroid、Retrofit以及Gson的库，最后那个才是新加入的，RxJava + Retrofit的使用需要用到最后那个包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;io.reactivex:rxjava:x.y.z&apos;</span><br><span class="line">compile &apos;io.reactivex:rxandroid:1.0.1&apos;</span><br><span class="line">compile &apos;com.squareup.retrofit2:retrofit:2.0.2&apos;</span><br><span class="line">compile &apos;com.squareup.retrofit2:converter-gson:2.0.2&apos;</span><br><span class="line">compile &apos;com.squareup.retrofit2:adapter-rxjava:2.0.2&apos;</span><br></pre></td></tr></table></figure></p><p><strong>注意: 最后三个包的版本号必须一样</strong><br>2.修改service(Call改为Observable)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface MyService &#123;</span><br><span class="line">  @GET(&quot;user/login&quot; )</span><br><span class="line">  Observable&lt;UserInfo&gt; login(</span><br><span class="line">          @Query(&quot;username&quot;) String username,</span><br><span class="line">          @Query(&quot;password&quot;) String password</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.网络请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = new Retrofit.Builder()</span><br><span class="line">.addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">.baseUrl(BASE_URL)</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line">MyService service = retrofit.create(MyService.class);</span><br><span class="line"></span><br><span class="line">service.loging(username,password)</span><br><span class="line">.subscribeOn(Schedulers.newThread())//请求在新的线程中执行</span><br><span class="line">.observeOn(Schedulers.io())         //请求完成后在io线程中执行</span><br><span class="line">.doOnNext(new Action1&lt;UserInfo&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void call(UserInfo userInfo) &#123;</span><br><span class="line">saveUserInfo(userInfo);//保存用户信息到本地</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.observeOn(AndroidSchedulers.mainThread())//最后在主线程中执行</span><br><span class="line">.subscribe(new Subscriber&lt;UserInfo&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void onCompleted() &#123;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void onError(Throwable e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void onNext(UserInfo userInfo) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Retrofit把请求封装进Observable,在请求结束后调用onNext() onError() 或 onCompleted().<br>在调用service的login方法后得到Observable对象, .subscribeOn(Scheduler.newThread())在新的线程中执行网络请求,请求成功后切换到io线程执行保存用户信息动作,最后再切换到主线程执行请求失败,成功动作.<br>整体逻辑都在一条链中,即使有变更也好添加修改.逻辑清晰.</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="http://www.jianshu.com/p/1fb294ec7e3b" target="_blank" rel="noopener">【Android】RxJava + Retrofit完成网络请求</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>RecyclerView</title>
      <link href="/2017/11/09/RecyclerView/"/>
      <url>/2017/11/09/RecyclerView/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>谷歌在support v7中,加入了新的控件-RecyclerView用来代替ListView GridView,结合了ListView GridView的特点,并实现了瀑布流效果.</p><h1 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h1><p>需要v7 包支持<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;com.android.support:appcompat-v7:26.1.0&apos;</span><br></pre></td></tr></table></figure></p><h1 id="几个重要的类"><a href="#几个重要的类" class="headerlink" title="几个重要的类"></a>几个重要的类</h1><ol><li>RecyclerView.Adapter:抽象类，为RecyclerView提供数据，一般根据不同的业务需求来编写具体的实现类。</li><li>RecyclerView.LayoutManager:抽象类，主要用于测量RecyclerView的子Item，以及根据不同的布局方式来实现Item的布局效果，v 7包自带的实现类有：LinearLayoutManager、StaggeredGridLayoutManager、GridLayoutManager…</li><li>RecyclerView.ItemDecoration:抽象类，这个主要用于不同的Item之间添加分割线（可选）。官方没有实现类，所以如果要添加分割线，我们需要手动实现这个抽象类</li><li>RecyclerView.ItemAnimator:抽象类，这个主要用于当一个item添加或者删除的时候出现的动画效果，官方提供一个默认的实现类。如果想要使我们的RecyclerView在添加、删除数据的时候有炫酷的动画，可以实现这个抽象类</li></ol><h1 id="xml布局"><a href="#xml布局" class="headerlink" title="xml布局"></a>xml布局</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.AppBarLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;android.support.v7.widget.Toolbar</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">            app:titleTextColor=&quot;@color/white&quot;</span><br><span class="line">            app:title=&quot;RecyclerView&quot;/&gt;</span><br><span class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id=&quot;@+id/recyclerview&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android.support.v7.widget.RecyclerView&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure><p>这里使用了4个控件, <a href="/2017/11/08/CoordinatorLayout/" title="CoordinatorLayout">CoordinatorLayout</a>, <a href="/2017/11/08/AppBarLayout/" title="AppBarLayout">AppBarLayout</a>, <a href="/2017/11/06/Toolbar/" title="Toolbar">Toolbar</a><br>和本文的RecyclerView  </p><p>item_recyclerview.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/tv_item&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;70dp&quot;</span><br><span class="line">        android:background=&quot;#ccc&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure></p><p>item布局只有一个TextView, 背景颜色灰色</p><h1 id="java代码-初试"><a href="#java代码-初试" class="headerlink" title="java代码(初试)"></a>java代码(初试)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RecyclerView recyclerview = findViewById(R.id.recyclerview);</span><br><span class="line">recyclerview.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false));</span><br><span class="line">MyAdapter myAdapter = new MyAdapter(data);</span><br><span class="line">recyclerview.setAdapter(myAdapter);</span><br></pre></td></tr></table></figure><p>代码解析:<br>recyclerview.setLayoutManager:设置布局管理器  </p><ol><li>LinearLayoutManager 以垂直或水平列表方式展示</li><li>GridLayoutManager 以网格方式展示</li><li>StaggeredGridLayoutManager 以瀑布流方式展示  </li></ol><p>recyclerview.setAdapter:设置适配器,适配器代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">private class MyAdapter extends RecyclerView.Adapter&lt;MyAdapter.ViewHolder&gt;&#123;</span><br><span class="line"></span><br><span class="line">        private ArrayList&lt;String&gt; mData;</span><br><span class="line"></span><br><span class="line">        public MyAdapter(ArrayList&lt;String&gt; data) &#123;</span><br><span class="line">            this.mData = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void updateData(ArrayList&lt;String&gt; data) &#123;//用户数据更新</span><br><span class="line">            this.mData = data;</span><br><span class="line">            notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public MyAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</span><br><span class="line">//实例化展示的View, </span><br><span class="line">            View inflate = View.inflate(RecyclerViewActivity.this, R.layout.item_recyclerview, null);</span><br><span class="line">//实例化ViewHolder</span><br><span class="line">            ViewHolder viewHolder = new ViewHolder(inflate);</span><br><span class="line">            return viewHolder;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onBindViewHolder(ViewHolder holder, int position) &#123;</span><br><span class="line">//holder就是onCreateViewHolder返回, 绑定数据</span><br><span class="line">            holder.textView.setText(mData.get(position));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int getItemCount() &#123;</span><br><span class="line">            return mData.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public class ViewHolder extends RecyclerView.ViewHolder&#123;</span><br><span class="line"></span><br><span class="line">            TextView textView;</span><br><span class="line"></span><br><span class="line">            public ViewHolder(View itemView) &#123;</span><br><span class="line">                super(itemView);</span><br><span class="line">                textView = itemView.findViewById(R.id.tv_item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>效果图:<br><img src="/2017/11/09/RecyclerView/t1.png" alt=""><br>效果和ListView一样,但是item直接没有分割线,xml文件中也不能设置分割线,可以通过mRecyclerView.addItemDecoration()来设置我们定义好的间隔样式.</p><h1 id="添加分割线"><a href="#添加分割线" class="headerlink" title="添加分割线"></a>添加分割线</h1><h2 id="LinearLayoutManager-分割线"><a href="#LinearLayoutManager-分割线" class="headerlink" title="LinearLayoutManager 分割线"></a>LinearLayoutManager 分割线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">public class DividerItemDecoration extends RecyclerView.ItemDecoration&#123;</span><br><span class="line">    private static final int[] ATTRS = new int[]&#123;</span><br><span class="line">            android.R.attr.listDivider</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static final int HORIZONTAL_LIST = LinearLayoutManager.HORIZONTAL;</span><br><span class="line"></span><br><span class="line">    public static final int VERTICAL_LIST = LinearLayoutManager.VERTICAL;</span><br><span class="line"></span><br><span class="line">    private Drawable mDivider;</span><br><span class="line"></span><br><span class="line">    private int mOrientation;</span><br><span class="line"></span><br><span class="line">    public DividerItemDecoration(Context context, int orientation) &#123;</span><br><span class="line">        final TypedArray a = context.obtainStyledAttributes(ATTRS);</span><br><span class="line">        mDivider = a.getDrawable(0);</span><br><span class="line">        a.recycle();</span><br><span class="line">        setOrientation(orientation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOrientation(int orientation) &#123;</span><br><span class="line">        if (orientation != HORIZONTAL_LIST &amp;&amp; orientation != VERTICAL_LIST) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;invalid orientation&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        mOrientation = orientation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onDraw(Canvas c, RecyclerView parent) &#123;</span><br><span class="line">        if (mOrientation == VERTICAL_LIST) &#123;</span><br><span class="line">            drawVertical(c, parent);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            drawHorizontal(c, parent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void drawVertical(Canvas c, RecyclerView parent) &#123;</span><br><span class="line">        final int left = parent.getPaddingLeft();</span><br><span class="line">        final int right = parent.getWidth() - parent.getPaddingRight();</span><br><span class="line"></span><br><span class="line">        final int childCount = parent.getChildCount();</span><br><span class="line">        for (int i = 0; i &lt; childCount; i++) &#123;</span><br><span class="line">            final View child = parent.getChildAt(i);</span><br><span class="line">            android.support.v7.widget.RecyclerView v = new android.support.v7.widget.RecyclerView(parent.getContext());</span><br><span class="line">            final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</span><br><span class="line">                    .getLayoutParams();</span><br><span class="line">            final int top = child.getBottom() + params.bottomMargin;</span><br><span class="line">            final int bottom = top + mDivider.getIntrinsicHeight();</span><br><span class="line">            mDivider.setBounds(left, top, right, bottom);</span><br><span class="line">            mDivider.draw(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void drawHorizontal(Canvas c, RecyclerView parent) &#123;</span><br><span class="line">        final int top = parent.getPaddingTop();</span><br><span class="line">        final int bottom = parent.getHeight() - parent.getPaddingBottom();</span><br><span class="line"></span><br><span class="line">        final int childCount = parent.getChildCount();</span><br><span class="line">        for (int i = 0; i &lt; childCount; i++) &#123;</span><br><span class="line">            final View child = parent.getChildAt(i);</span><br><span class="line">            final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</span><br><span class="line">                    .getLayoutParams();</span><br><span class="line">            final int left = child.getRight() + params.rightMargin;</span><br><span class="line">            final int right = left + mDivider.getIntrinsicHeight();</span><br><span class="line">            mDivider.setBounds(left, top, right, bottom);</span><br><span class="line">            mDivider.draw(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void getItemOffsets(Rect outRect, int itemPosition, RecyclerView parent) &#123;</span><br><span class="line">        if (mOrientation == VERTICAL_LIST) &#123;</span><br><span class="line">            outRect.set(0, 0, 0, mDivider.getIntrinsicHeight());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            outRect.set(0, 0, mDivider.getIntrinsicWidth(), 0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">recyclerview.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false));</span><br><span class="line">recyclerview.addItemDecoration(new com.newyulong.materialdesignstu.DividerItemDecoration.DividerItemDecoration(this, com.newyulong.materialdesignstu.DividerItemDecoration.DividerItemDecoration.VERTICAL_LIST));</span><br></pre></td></tr></table></figure><p>效果图:<br><img src="/2017/11/09/RecyclerView/t2.png" alt=""></p><h2 id="GridLayoutManager分割线"><a href="#GridLayoutManager分割线" class="headerlink" title="GridLayoutManager分割线"></a>GridLayoutManager分割线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line">public class DividerGridItemDecoration extends RecyclerView.ItemDecoration &#123;</span><br><span class="line">    private static final int[] ATTRS = new int[] &#123; android.R.attr.listDivider &#125;;</span><br><span class="line">    private Drawable mDivider;</span><br><span class="line"></span><br><span class="line">    private int divider_height = 2;</span><br><span class="line"></span><br><span class="line">    public DividerGridItemDecoration(Context context)</span><br><span class="line">    &#123;</span><br><span class="line">        final TypedArray a = context.obtainStyledAttributes(ATTRS);</span><br><span class="line">        mDivider = a.getDrawable(0);</span><br><span class="line">        a.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DividerGridItemDecoration(Context context,int px_divider_height)</span><br><span class="line">    &#123;</span><br><span class="line">        final TypedArray a = context.obtainStyledAttributes(ATTRS);</span><br><span class="line">        mDivider = a.getDrawable(0);</span><br><span class="line">        mDivider.setColorFilter(Color.WHITE,PorterDuff.Mode.SRC);</span><br><span class="line">        divider_height = px_divider_height;</span><br><span class="line">        a.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DividerGridItemDecoration(Context context,int px_divider_height,int divider_color)</span><br><span class="line">    &#123;</span><br><span class="line">        final TypedArray a = context.obtainStyledAttributes(ATTRS);</span><br><span class="line">        mDivider = a.getDrawable(0);</span><br><span class="line">        mDivider.setColorFilter(divider_color,PorterDuff.Mode.SRC);</span><br><span class="line">        divider_height = px_divider_height;</span><br><span class="line">        a.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        drawHorizontal(c, parent);</span><br><span class="line">        drawVertical(c, parent);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int getSpanCount(RecyclerView parent)</span><br><span class="line">    &#123;</span><br><span class="line">        // 列数</span><br><span class="line">        int spanCount = -1;</span><br><span class="line">        RecyclerView.LayoutManager layoutManager = parent.getLayoutManager();</span><br><span class="line">        if (layoutManager instanceof GridLayoutManager)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            spanCount = ((GridLayoutManager) layoutManager).getSpanCount();</span><br><span class="line">        &#125; else if (layoutManager instanceof StaggeredGridLayoutManager)</span><br><span class="line">        &#123;</span><br><span class="line">            spanCount = ((StaggeredGridLayoutManager) layoutManager)</span><br><span class="line">                    .getSpanCount();</span><br><span class="line">        &#125;</span><br><span class="line">        return spanCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void drawHorizontal(Canvas c, RecyclerView parent)</span><br><span class="line">    &#123;</span><br><span class="line">        int childCount = parent.getChildCount();</span><br><span class="line">        for (int i = 0; i &lt; childCount; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            final View child = parent.getChildAt(i);</span><br><span class="line">            final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</span><br><span class="line">                    .getLayoutParams();</span><br><span class="line">            final int left = child.getLeft() - params.leftMargin;</span><br><span class="line">            final int right = child.getRight() + params.rightMargin</span><br><span class="line">                    + divider_height;</span><br><span class="line">            final int top = child.getBottom() + params.bottomMargin;</span><br><span class="line">            final int bottom = top + divider_height;</span><br><span class="line">            mDivider.setBounds(left, top, right, bottom);</span><br><span class="line">            mDivider.draw(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void drawVertical(Canvas c, RecyclerView parent)</span><br><span class="line">    &#123;</span><br><span class="line">        final int childCount = parent.getChildCount();</span><br><span class="line">        for (int i = 0; i &lt; childCount; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            final View child = parent.getChildAt(i);</span><br><span class="line"></span><br><span class="line">            final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</span><br><span class="line">                    .getLayoutParams();</span><br><span class="line">            final int top = child.getTop() - params.topMargin;</span><br><span class="line">            final int bottom = child.getBottom() + params.bottomMargin;</span><br><span class="line">            final int left = child.getRight() + params.rightMargin;</span><br><span class="line">            final int right = left + divider_height;</span><br><span class="line"></span><br><span class="line">            mDivider.setBounds(left, top, right, bottom);</span><br><span class="line">            mDivider.draw(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean isLastColum(RecyclerView parent, int pos, int spanCount,</span><br><span class="line">                                int childCount)</span><br><span class="line">    &#123;</span><br><span class="line">        RecyclerView.LayoutManager layoutManager = parent.getLayoutManager();</span><br><span class="line">        if (layoutManager instanceof GridLayoutManager)</span><br><span class="line">        &#123;</span><br><span class="line">            if ((pos + 1) % spanCount == 0)// 如果是最后一列，则不需要绘制右边</span><br><span class="line">            &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (layoutManager instanceof StaggeredGridLayoutManager)</span><br><span class="line">        &#123;</span><br><span class="line">            int orientation = ((StaggeredGridLayoutManager) layoutManager)</span><br><span class="line">                    .getOrientation();</span><br><span class="line">            if (orientation == StaggeredGridLayoutManager.VERTICAL)</span><br><span class="line">            &#123;</span><br><span class="line">                if ((pos + 1) % spanCount == 0)// 如果是最后一列，则不需要绘制右边</span><br><span class="line">                &#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else</span><br><span class="line">            &#123;</span><br><span class="line">                childCount = childCount - childCount % spanCount;</span><br><span class="line">                if (pos &gt;= childCount)// 如果是最后一列，则不需要绘制右边</span><br><span class="line">                    return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean isLastRaw(RecyclerView parent, int pos, int spanCount,</span><br><span class="line">                              int childCount)</span><br><span class="line">    &#123;</span><br><span class="line">        RecyclerView.LayoutManager layoutManager = parent.getLayoutManager();</span><br><span class="line">        if (layoutManager instanceof GridLayoutManager)</span><br><span class="line">        &#123;</span><br><span class="line">            childCount = childCount - childCount % spanCount;</span><br><span class="line">            if (pos &gt;= childCount)// 如果是最后一行，则不需要绘制底部</span><br><span class="line">                return true;</span><br><span class="line">        &#125; else if (layoutManager instanceof StaggeredGridLayoutManager)</span><br><span class="line">        &#123;</span><br><span class="line">            int orientation = ((StaggeredGridLayoutManager) layoutManager)</span><br><span class="line">                    .getOrientation();</span><br><span class="line">            // StaggeredGridLayoutManager 且纵向滚动</span><br><span class="line">            if (orientation == StaggeredGridLayoutManager.VERTICAL)</span><br><span class="line">            &#123;</span><br><span class="line">                childCount = childCount - childCount % spanCount;</span><br><span class="line">                // 如果是最后一行，则不需要绘制底部</span><br><span class="line">                if (pos &gt;= childCount)</span><br><span class="line">                    return true;</span><br><span class="line">            &#125; else</span><br><span class="line">            // StaggeredGridLayoutManager 且横向滚动</span><br><span class="line">            &#123;</span><br><span class="line">                // 如果是最后一行，则不需要绘制底部</span><br><span class="line">                if ((pos + 1) % spanCount == 0)</span><br><span class="line">                &#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void getItemOffsets(Rect outRect, int itemPosition,</span><br><span class="line">                               RecyclerView parent)</span><br><span class="line">    &#123;</span><br><span class="line">        int spanCount = getSpanCount(parent);</span><br><span class="line">        int childCount = parent.getAdapter().getItemCount();</span><br><span class="line">        if (isLastRaw(parent, itemPosition, spanCount, childCount))// 如果是最后一行，则不需要绘制底部</span><br><span class="line">        &#123;</span><br><span class="line">            outRect.set(0, 0, divider_height, 0);</span><br><span class="line">        &#125; else if (isLastColum(parent, itemPosition, spanCount, childCount))// 如果是最后一列，则不需要绘制右边</span><br><span class="line">        &#123;</span><br><span class="line">            outRect.set(0, 0, 0, divider_height);</span><br><span class="line">        &#125; else</span><br><span class="line">        &#123;</span><br><span class="line">            outRect.set(0, 0, divider_height,divider_height);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">recyclerview.addItemDecoration(new com.newyulong.materialdesignstu.DividerItemDecoration.DividerItemDecoration(this, com.newyulong.materialdesignstu.DividerItemDecoration.DividerItemDecoration.VERTICAL_LIST));</span><br><span class="line">//recyclerview.setLayoutManager(new GridLayoutManager(this,4,LinearLayoutManager.HORIZONTAL,false));//横向GridView</span><br><span class="line">recyclerview.addItemDecoration(new DividerGridItemDecoration(this));</span><br></pre></td></tr></table></figure><p>效果图:<br><img src="/2017/11/09/RecyclerView/t3.png" alt=""></p><h1 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h1><p>StaggeredGridLayoutManager:瀑布流布局管理器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recyclerview.setLayoutManager(new StaggeredGridLayoutManager(3,StaggeredGridLayoutManager.VERTICAL));</span><br></pre></td></tr></table></figure></p><p>效果图:<br><img src="/2017/11/09/RecyclerView/t3.png" alt=""><br>居然和GridLayoutManager的效果一样!修改第二项item的高度为80,其他的为160<br><img src="/2017/11/09/RecyclerView/t4.png" alt=""></p><h1 id="item点击事件"><a href="#item点击事件" class="headerlink" title="item点击事件"></a>item点击事件</h1><h2 id="在MyAdapter中定义如下接口-模拟ListView的OnItemClickListener："><a href="#在MyAdapter中定义如下接口-模拟ListView的OnItemClickListener：" class="headerlink" title="在MyAdapter中定义如下接口,模拟ListView的OnItemClickListener："></a>在MyAdapter中定义如下接口,模拟ListView的OnItemClickListener：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static interface OnItemClickListener &#123;</span><br><span class="line">        void onItemClick(View view , int position);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="在onCreateViewHolder-中为每个item添加点击事件"><a href="#在onCreateViewHolder-中为每个item添加点击事件" class="headerlink" title="在onCreateViewHolder()中为每个item添加点击事件"></a>在onCreateViewHolder()中为每个item添加点击事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public ViewHolder onCreateViewHolder(ViewGroup viewGroup,  int viewType) &#123;</span><br><span class="line">        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item, viewGroup, false);</span><br><span class="line">        ViewHolder vh = new ViewHolder(view);</span><br><span class="line">        //将创建的View注册点击事件</span><br><span class="line">        view.setOnClickListener(this);</span><br><span class="line">        return vh;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="将点击事件转移给外面的调用者："><a href="#将点击事件转移给外面的调用者：" class="headerlink" title="将点击事件转移给外面的调用者："></a>将点击事件转移给外面的调用者：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        if (mOnItemClickListener != null) &#123;</span><br><span class="line">            //注意这里使用getTag方法获取position</span><br><span class="line">            mOnItemClickListener.onItemClick(v,(int)v.getTag());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="注意上面调用接口的onItemClick-中的v-getTag-方法，这需要在onBindViewHolder-方法中设置和item的position"><a href="#注意上面调用接口的onItemClick-中的v-getTag-方法，这需要在onBindViewHolder-方法中设置和item的position" class="headerlink" title="注意上面调用接口的onItemClick()中的v.getTag()方法，这需要在onBindViewHolder()方法中设置和item的position"></a>注意上面调用接口的onItemClick()中的v.getTag()方法，这需要在onBindViewHolder()方法中设置和item的position</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void onBindViewHolder(ViewHolder viewHolder,  int position) &#123;</span><br><span class="line">        viewHolder.mTextView.setText(datas[position]);</span><br><span class="line">        //将position保存在itemView的Tag中，以便点击时进行获取</span><br><span class="line">        viewHolder.itemView.setTag(position);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="最后暴露给外面的调用者，定义一个设置Listener的方法（）："><a href="#最后暴露给外面的调用者，定义一个设置Listener的方法（）：" class="headerlink" title="最后暴露给外面的调用者，定义一个设置Listener的方法（）："></a>最后暴露给外面的调用者，定义一个设置Listener的方法（）：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private OnItemClickListener mOnItemClickListener = null;</span><br><span class="line">public void setOnItemClickListener(OnItemClickListener listener) &#123;</span><br><span class="line">        this.mOnItemClickListener = listener;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文讲的是RecycView布局,列表形式,网格形式,瀑布流形式.<br>使用RecycView需要设置布局管理器(LinearLayoutManager,GridLayoutManager,StaggeredGridLayoutManager)<br>同样需要适配器(继承RecyclerView.Adapter), 需要重写onCreateViewHolder方法(实例化ViewHolder), onBindViewHolder方法(得到ViewHolder,绑定数据), 以及getItemCount方法,<br>还需要定义ViewHolder类继承RecyclerView.ViewHolder类<br>设置分割线<br>设置动画(删除,增加item时的动画)</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>CollapsingToolbarLayout</title>
      <link href="/2017/11/08/CollapsingToolbarLayout/"/>
      <url>/2017/11/08/CollapsingToolbarLayout/</url>
      <content type="html"><![CDATA[<h1 id="简介CollapsingToolbarLayout"><a href="#简介CollapsingToolbarLayout" class="headerlink" title="简介CollapsingToolbarLayout"></a>简介CollapsingToolbarLayout</h1><p>CollapsingToolbarLayout作用是提供一个可以折叠的Toolbar,给它设置layout_scrollFlags,就可以控制其内的控件(如:ImageView,Toolbar)在响应layout_behavior事件时做出相应的scrollFlags滚动事件.</p><h1 id="xml布局文件"><a href="#xml布局文件" class="headerlink" title="xml布局文件"></a>xml布局文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.AppBarLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;android.support.design.widget.CollapsingToolbarLayout</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;300dp&quot;</span><br><span class="line">            app:contentScrim=&quot;@color/colorPrimary&quot;</span><br><span class="line">            app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;</span><br><span class="line">            app:title=&quot;Toolbar&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;match_parent&quot;</span><br><span class="line">                android:scaleType=&quot;centerCrop&quot;</span><br><span class="line">                android:src=&quot;@mipmap/coll&quot;</span><br><span class="line">                app:layout_collapseMode=&quot;parallax&quot;</span><br><span class="line">                app:layout_collapseParallaxMultiplier=&quot;0.5&quot; /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;android.support.v7.widget.Toolbar</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">                app:layout_collapseMode=&quot;pin&quot;</span><br><span class="line">                app:navigationIcon=&quot;@mipmap/back_black_arra&quot; /&gt;</span><br><span class="line">        &lt;/android.support.design.widget.CollapsingToolbarLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v4.widget.NestedScrollView</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:text=&quot;@string/txt_appbar&quot; /&gt;</span><br><span class="line">    &lt;/android.support.v4.widget.NestedScrollView&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure><p>CollapsingToolbarLayout包含一个ImageView和一个Toolbar,把这个CollapsingToolbarLayout放到AppBarLayout中作为一个整体。</p><ol><li>在CollapsingToolbarLayout中:<br> <strong>我们必须设置layout_scrollFlags</strong></li><li>ImageView中:<br> layout_collapseMode(折叠模式):<br> pin: 当CollapsingToolbarLayout完全收缩后,Toolbar还可以保留在屏幕上.<br> parallax: 在内容滚动时，CollapsingToolbarLayout中的View（比如ImageView)也可以同时滚动，实现视差滚动效果，通常和layout_collapseParallaxMultiplier(设置视差因子)搭配使用<br> layout_collapseParallaxMultiplier: 设置视差滚动因子，值为：0~1</li><li>Toolbar中:<br> layout_collapseMode(折叠模式)：为pin(Toolbar保留在屏幕上)</li></ol><p>上例分析: 当向上滚动时,ImageView会有视觉差的向上滚出屏幕,最后Toolbar会固定在最顶端<br>效果图:<br><img src="/2017/11/08/CollapsingToolbarLayout/ctl1.gif" alt=""></p><h1 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h1><p>修改Toolbar title颜色<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctl.setExpandedTitleColor(getResources().getColor(R.color.white));</span><br><span class="line">ctl.setCollapsedTitleTextColor(getResources().getColor(R.color.white));</span><br></pre></td></tr></table></figure></p><p>修改折叠后Toolbar背景颜色 (app:contentScrim)<br>上例xml文件中已经将Toolbar背景颜色修改过,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.design.widget.CollapsingToolbarLayout</span><br><span class="line">android:id=&quot;@+id/ctl&quot;</span><br><span class="line">android:layout_width=&quot;match_parent&quot;</span><br><span class="line">android:layout_height=&quot;300dp&quot;</span><br><span class="line">app:contentScrim=&quot;@color/colorPrimary&quot;</span><br><span class="line">app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;</span><br><span class="line">app:title=&quot;Toolbar&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>不然会显示ImageView内容,去掉看看<br><img src="/2017/11/08/CollapsingToolbarLayout/ctl2.gif" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>CollapsingToolbarLayout是Toolbar的扩充,提供折叠功能.使用时,用它包含Toolbar和其他内容(如ImageView)达到炫酷的效果.</p>]]></content>
      
      
        <tags>
            
            <tag> material design组件学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AppBarLayout</title>
      <link href="/2017/11/08/AppBarLayout/"/>
      <url>/2017/11/08/AppBarLayout/</url>
      <content type="html"><![CDATA[<h1 id="官方文档介绍"><a href="#官方文档介绍" class="headerlink" title="官方文档介绍"></a>官方文档介绍</h1><p>AppBarLayout是一个垂直的LinearLayout，实现了Material Design中app bar的scrolling gestures特性。AppBarLayout的子View应该声明想要具有的“滚动行为”，这可以通过layout_scrollFlags属性或是setScrollFlags()方法来指定。AppBarLayout只有作为CoordinatorLayout的直接子View时才能正常工作，为了让AppBarLayout能够知道何时滚动其子View，我们还应该在CoordinatorLayout布局中提供一个可滚动View，我们称之为scrolling view。scrolling view和AppBarLayout之间的关联，通过将scrolling view的Behavior设为AppBarLayout.ScrollingViewBehavior来建立。<br>根据上文我们知道,AppBarLayout主要功能是当位于同一父容器中的可滚动View发生滚动式,APPBarLayout会根据scolling view声明的滚动行为来对其子View进行相应的滚动.<br>先来看张图:AppBarLayout包含Toolbar和一个TextView(没有设置scrollFlags)<br><img src="/2017/11/08/AppBarLayout/abl1.gif" alt=""><br>当向上滚动式,ToolBar会消失;向下滚动时,ToolBar会出现.AppBarLayout就是这么神奇</p><h1 id="xml布局文件"><a href="#xml布局文件" class="headerlink" title="xml布局文件"></a>xml布局文件</h1><p>上面例子的xml布局文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.AppBarLayout</span><br><span class="line">        android:id=&quot;@+id/abl&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line">        &lt;android.support.v7.widget.Toolbar</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            app:title=&quot;Toolbar&quot;</span><br><span class="line">            app:layout_scrollFlags=&quot;scroll&quot;</span><br><span class="line">            android:layout_height=&quot;?attr/actionBarSize&quot;&gt;</span><br><span class="line">        &lt;/android.support.v7.widget.Toolbar&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:padding=&quot;15dp&quot;</span><br><span class="line">            android:text=&quot;toolbar 下方的textview&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v4.widget.NestedScrollView</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:text=&quot;@string/txt_appbar&quot;</span><br><span class="line">            android:lineSpacingMultiplier=&quot;1.5&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android.support.v4.widget.NestedScrollView&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure></p><p>布局文件中,NestedScrollView是scrolling view,scrolling view需要支持嵌套滚动.  </p><p>上面的Toolbar的layout_scrollFlags属性被设置为了”scroll”,Toolbar就会随着scrolling view的滚动而滚动,下面解释下scrollFlags:</p><ol><li>scroll<br> 设置成这个值就好比Toolbar和scrolling view是一体的.</li><li>exitUntilCollapsed<br> 当Toolbar向上滚出屏幕时,会被折叠直到达到最小高度停止折叠<br> 下图为了演示,将Toolbar的高度设置成200dp,注释掉Toolbar下方的TextView<br> <img src="/2017/11/08/AppBarLayout/abl2.gif" alt=""></li><li>enterAlways<br> 只要向下滚动时,先滚动Toolbar,完全展开后才会去滚动scrolling view<br> <img src="/2017/11/08/AppBarLayout/abl3.gif" alt=""></li><li>enterAlwaysCollapsed<br> 在enterAlways基础上加了折叠效果.当我们开始向下滚动scrolling view是,Toolbar会跟着滚动知道达到其”折叠高度”(即最小高度).然后当scrolling view滚动到完全显示后,再向下滚动scrolling view,Toolbar会接着滚动到完全显示出来<br> <img src="/2017/11/08/AppBarLayout/abl4.gif" alt=""><br> 注意,要达到上图效果,需要把layout_scrollFlags指定为”scroll|enterAlways|enterAlwaysCollapsed”.</li><li>snap<br> 在一次滚动结束时，Toolbar很可能只处于“部分显示”的状态，加上这个标记能够达到“要么完全隐藏，要么完全显示”的效果。  </li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>AppBarLayout是一个垂直的LinearLayout  </li><li>AppBarLayout需要和CoordinatorLayout一起使用,并作为它的直接子View</li><li>为了实现滚动还应在Coordinator布局中提供一个可滚动View(scrolling view),scrolling view还需设置app:layout_behavior=”@string/appbar_scrolling_view_behavior”建立联系</li><li>设置AppBarLayout子View的scrollFlag属性,控制其可以根据scrolling view的滚到而滚动</li></ol>]]></content>
      
      
        <tags>
            
            <tag> material design组件学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CoordinatorLayout</title>
      <link href="/2017/11/08/CoordinatorLayout/"/>
      <url>/2017/11/08/CoordinatorLayout/</url>
      <content type="html"><![CDATA[<p>CoordinatorLayout并不局限于与AppbarLayout,CollapsingToolbarLayout,Toolbar配合使用,它的功能强大着呢.<br>CoordinatorLayout:behaivor协调view,它是帮助协调各个子View的布局.<br>其中Behavior就是一个应用于View的观察者模式,一个View跟随着另一个View的变化而变化,或者说一个View监听另一个View.<br>在Behavior中,被观察View也就是事件源被称为denpendcy,而观察View,则被称为clild. clild跟随denpendcy</p><h1 id="CoordinatorLayout使用"><a href="#CoordinatorLayout使用" class="headerlink" title="CoordinatorLayout使用"></a>CoordinatorLayout使用</h1><h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/btn&quot;</span><br><span class="line">        android:layout_width=&quot;100dp&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;btn&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginTop=&quot;100dp&quot;</span><br><span class="line">        android:text=&quot;跟随btn&quot;</span><br><span class="line">         /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure><h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class CoordinatorLayoutActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_coordinatorlayout);</span><br><span class="line">        Button btn = findViewById(R.id.btn);</span><br><span class="line">        btn.setOnTouchListener(new View.OnTouchListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean onTouch(View v, MotionEvent event) &#123;</span><br><span class="line">                switch (event.getAction())&#123;</span><br><span class="line">                    case MotionEvent.ACTION_MOVE:</span><br><span class="line">                        v.setX(event.getRawX()-v.getWidth()/2);</span><br><span class="line">                        v.setY(event.getRawY()-v.getHeight()/2);</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按钮可以跟随手指移动  </p><h2 id="自定义类集成Behavior类"><a href="#自定义类集成Behavior类" class="headerlink" title="自定义类集成Behavior类"></a>自定义类集成Behavior类</h2><p>创建一MyBehavior类,集成Behavior<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class MyBehavior extends CoordinatorLayout.Behavior&lt;TextView&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public MyBehavior(Context context, AttributeSet attrs) &#123;//必不可少</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean layoutDependsOn(CoordinatorLayout parent, TextView child, View dependency) &#123;</span><br><span class="line">        return dependency instanceof Button;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onDependentViewChanged(CoordinatorLayout parent, TextView child, View dependency) &#123;</span><br><span class="line">        child.setX(dependency.getX());//此处的denpendency就是btn1</span><br><span class="line">        child.setY(dependency.getY()+200);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意:<br>layoutDependsOn() 代表寻找被观察View,本例是Button<br>onDependentViewChanged() 被观察View变化的时候回调用的方法,本例是TextView.其中dependency就是Button,于是我们让TextView跟随Button的移动而移动<br>必须重写带双参的构造器，因为从xml反射需要调用。<br>然后，在xml中，给TextView设置我们的Behavior。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    android:layout_marginTop=&quot;100dp&quot;</span><br><span class="line">    android:text=&quot;跟随btn&quot;</span><br><span class="line">    app:layout_behavior=&quot;.behavior.MyBehavior&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>效果图:<br><img src="/2017/11/08/CoordinatorLayout/cl1.gif" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文讲解CoordinatorLayout的使用,一个Child(TextView) 跟随 dependency移动,定义一个继承Behavior的类,Child(TextView)增加app:layout_behavior属性指向这个类,那么就可实现跟随动作</p>]]></content>
      
      
        <tags>
            
            <tag> material design组件学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TabLayout</title>
      <link href="/2017/11/07/TabLayout/"/>
      <url>/2017/11/07/TabLayout/</url>
      <content type="html"><![CDATA[<p>TabLayout是Android Support Design Library库中的一个控件,提供了一个水平的布局用来展示Tabs。</p><h1 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h1><p>使用Snackbar要导入com.android.support:design库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:design:26.1.0&apos;</span><br></pre></td></tr></table></figure></p><h1 id="一般使用"><a href="#一般使用" class="headerlink" title="一般使用"></a>一般使用</h1><ol><li><p>xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.design.widget.TabLayout</span><br><span class="line">    android:id=&quot;@+id/tabLayout&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    android:background=&quot;#eee&quot;</span><br><span class="line">    app:tabSelectedTextColor=&quot;#666&quot;</span><br><span class="line">    app:tabTextColor=&quot;#ccc&quot;&gt;</span><br><span class="line">&lt;/android.support.design.widget.TabLayout&gt;</span><br></pre></td></tr></table></figure></li><li><p>java代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TabLayout tabLayout = findViewById(R.id.tabLayout);</span><br><span class="line">tabLayout.addTab(tabLayout.newTab().setText(&quot;tab1&quot;));</span><br><span class="line">tabLayout.addTab(tabLayout.newTab().setText(&quot;tab2&quot;));</span><br><span class="line">tabLayout.addTab(tabLayout.newTab().setText(&quot;tab3&quot;));</span><br></pre></td></tr></table></figure></li><li><p>效果图<br><img src="/2017/11/07/TabLayout/t1.png" alt=""></p></li></ol><h1 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h1><ol><li><p>设置未选择时字体颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:tabTextColor=&quot;#0f0&quot;</span><br></pre></td></tr></table></figure></li><li><p>设置选中时的字体颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:tabSelectedTextColor=&quot;@color/colorAccent&quot;</span><br></pre></td></tr></table></figure></li><li><p>设置指示器颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:tabIndicatorColor=&quot;#f00&quot;</span><br></pre></td></tr></table></figure></li><li><p>设置Tab背景颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:tabBackground=&quot;@color/blue&quot;</span><br></pre></td></tr></table></figure><p> 看看效果:<br><img src="/2017/11/07/TabLayout/t2.png" alt=""></p></li><li><p>设置TabItem字体大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:tabTextAppearance=&quot;@android:style/TextAppearance.Large&quot;</span><br></pre></td></tr></table></figure></li><li><p>设置指示器下标高度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:tabIndicatorHeight=&quot;5dp&quot;</span><br></pre></td></tr></table></figure></li><li><p>Tab模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:tabMode=&quot;scrollable&quot; //默认为fixed</span><br></pre></td></tr></table></figure></li><li><p>添加图标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tabLayout.addTab(tabLayout.newTab().setText(&quot;icon&quot;).setIcon(R.mipmap.ic_launcher));</span><br></pre></td></tr></table></figure><p> 多添加几个tag,看看效果:<br><img src="/2017/11/07/TabLayout/tl1.gif" alt=""></p></li><li>Tab宽度限制<br>设置最小宽度:<br>app:tabMinWidth=”100dp”<br><img src="/2017/11/07/TabLayout/t3.png" alt=""><br>可以看出每个Tab的宽度变宽了</li></ol><h1 id="TabLayout的监听事件"><a href="#TabLayout的监听事件" class="headerlink" title="TabLayout的监听事件"></a>TabLayout的监听事件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() &#123;</span><br><span class="line">public void onTabSelected(TabLayout.Tab tab) &#123;</span><br><span class="line">//tab被选中</span><br><span class="line">Log.d(TAG,&quot;onTabSelected: &quot;+tab.getPosition());</span><br><span class="line">&#125;</span><br><span class="line">public void onTabUnselected(TabLayout.Tab tab) &#123;</span><br><span class="line">//tab取消选中</span><br><span class="line">Log.d(TAG,&quot;onTabUnselected: &quot;+tab.getPosition());</span><br><span class="line">&#125;</span><br><span class="line">public void onTabReselected(TabLayout.Tab tab) &#123;</span><br><span class="line">//tab再次被选中</span><br><span class="line">Log.d(TAG,&quot;onTabReselected: &quot;+tab.getPosition());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>切换Tab,看看日志:<br><img src="/2017/11/07/TabLayout/tl2.gif" alt=""><br>0 -&gt; 1: 0unSelected 1selected<br>1 -&gt; 3: 1unSelected 3selected<br>3 -&gt; 0: 3unSelected 0selected  </p><h1 id="TabLayout与ViewPager联动"><a href="#TabLayout与ViewPager联动" class="headerlink" title="TabLayout与ViewPager联动"></a>TabLayout与ViewPager联动</h1><ol><li>配置viewpage的adapter,<strong>实现getPageTitle(position)方法</strong></li><li>使用setupWithViewPager(viewpager)关联<br>代码如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">public class TabLayoutActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private final static String TAG = &quot;TabLayoutActivity&quot;;</span><br><span class="line"></span><br><span class="line">    private String[] mTitleArray = &#123;&quot;item1&quot;, &quot;xitem2&quot;, &quot;xxxitem3&quot;, &quot;xxxxitem4&quot;,&quot;xxxxxitem5&quot;&#125;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_tablayout);</span><br><span class="line">        TabLayout tabLayout = findViewById(R.id.tabLayout);</span><br><span class="line">        ViewPager vp = findViewById(R.id.vp);</span><br><span class="line">        vp.setAdapter(new MyAdapter());</span><br><span class="line">//  去掉addTab(),从viewpage 的 getPageTitle()中获取</span><br><span class="line">//        tabLayout.addTab(tabLayout.newTab().setText(&quot;icon&quot;).setIcon(R.mipmap.ic_launcher));</span><br><span class="line">//        tabLayout.addTab(tabLayout.newTab().setText(&quot;tab1&quot;));</span><br><span class="line">//        tabLayout.addTab(tabLayout.newTab().setText(&quot;tab2&quot;));</span><br><span class="line">//        tabLayout.addTab(tabLayout.newTab().setText(&quot;tab3&quot;));</span><br><span class="line">//        tabLayout.addTab(tabLayout.newTab().setText(&quot;tab4&quot;));</span><br><span class="line">//        tabLayout.addTab(tabLayout.newTab().setText(&quot;tab5&quot;));</span><br><span class="line">//        tabLayout.addTab(tabLayout.newTab().setText(&quot;tab6&quot;));</span><br><span class="line"></span><br><span class="line">        tabLayout.setupWithViewPager(vp);//关联viewpager</span><br><span class="line"></span><br><span class="line">        tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() &#123;</span><br><span class="line">            public void onTabSelected(TabLayout.Tab tab) &#123;</span><br><span class="line">                //tab被选中</span><br><span class="line">                Log.d(TAG,&quot;onTabSelected: &quot;+tab.getPosition());</span><br><span class="line">            &#125;</span><br><span class="line">            public void onTabUnselected(TabLayout.Tab tab) &#123;</span><br><span class="line">                //tab取消选中</span><br><span class="line">                Log.d(TAG,&quot;onTabUnselected: &quot;+tab.getPosition());</span><br><span class="line">            &#125;</span><br><span class="line">            public void onTabReselected(TabLayout.Tab tab) &#123;</span><br><span class="line">                //tab再次被选中</span><br><span class="line">                Log.d(TAG,&quot;onTabReselected: &quot;+tab.getPosition());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class MyAdapter extends PagerAdapter &#123;</span><br><span class="line">        public int getCount() &#123;</span><br><span class="line">            return mTitleArray.length;</span><br><span class="line">        &#125;</span><br><span class="line">        public boolean isViewFromObject(View view, Object object) &#123;</span><br><span class="line">            return view == object;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Object instantiateItem(ViewGroup container, int position) &#123;</span><br><span class="line">            TextView tv = new TextView(TabLayoutActivity.this);</span><br><span class="line">            tv.setText(mTitleArray[position]);</span><br><span class="line">            tv.setGravity(Gravity.CENTER);</span><br><span class="line">            container.addView(tv, ViewPager.LayoutParams.MATCH_PARENT, ViewPager.LayoutParams.WRAP_CONTENT);</span><br><span class="line">            return tv;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void destroyItem(ViewGroup container, int position, Object object) &#123;</span><br><span class="line">            container.removeView((View) object);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public CharSequence getPageTitle(int position) &#123;</span><br><span class="line">            return mTitleArray[position];//title给TabLayout使用</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>效果图:<br><img src="/2017/11/07/TabLayout/tl3.gif" alt="">  </p><h1 id="扩展-设置下划线宽度和文字一样长"><a href="#扩展-设置下划线宽度和文字一样长" class="headerlink" title="扩展(设置下划线宽度和文字一样长)"></a>扩展(设置下划线宽度和文字一样长)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public void reflex(final TabLayout tabLayout, final int margin, final int padding) &#123;</span><br><span class="line">    //了解源码得知 线的宽度是根据 tabView的宽度来设置的</span><br><span class="line">    tabLayout.post(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //拿到tabLayout的mTabStrip属性</span><br><span class="line">                LinearLayout mTabStrip = (LinearLayout) tabLayout.getChildAt(0);</span><br><span class="line"></span><br><span class="line">                //计算总长度</span><br><span class="line">                float sumWith = 0;</span><br><span class="line"></span><br><span class="line">                for (int i = 0; i &lt; mTabStrip.getChildCount(); i++) &#123;</span><br><span class="line">                    View tabView = mTabStrip.getChildAt(i);</span><br><span class="line"></span><br><span class="line">                    //拿到tabView的mTextView属性  tab的字数不固定一定用反射取mTextView</span><br><span class="line">                    Field mTextViewField = tabView.getClass().getDeclaredField(&quot;mTextView&quot;);</span><br><span class="line">                    mTextViewField.setAccessible(true);</span><br><span class="line"></span><br><span class="line">                    TextView mTextView = (TextView) mTextViewField.get(tabView);</span><br><span class="line"></span><br><span class="line">                    tabView.setPadding(0, 0, 0, 0);</span><br><span class="line"></span><br><span class="line">                    //因为我想要的效果是   字多宽线就多宽，所以测量mTextView的宽度</span><br><span class="line">                    int width = 0;</span><br><span class="line">                    width = mTextView.getWidth();</span><br><span class="line">                    if (width == 0) &#123;</span><br><span class="line">                        mTextView.measure(0, 0);</span><br><span class="line">                        width = mTextView.getMeasuredWidth();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    //设置tab左右间距为10dp  注意这里不能使用Padding 因为源码中线的宽度是根据 tabView的宽度来设置的</span><br><span class="line">                    LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) tabView.getLayoutParams();</span><br><span class="line">                    params.width = width + 2 * padding;</span><br><span class="line">                    params.leftMargin = margin;</span><br><span class="line">                    params.rightMargin = margin;</span><br><span class="line">                    tabView.setLayoutParams(params);</span><br><span class="line"></span><br><span class="line">                    tabView.invalidate();</span><br><span class="line">                    sumWith += 2 * margin + 2 * padding + width;</span><br><span class="line">                &#125;</span><br><span class="line">                int sc_with = getWindowManager().getDefaultDisplay().getWidth();</span><br><span class="line">                if (sumWith &lt;= sc_with) &#123;//总长度小于屏幕宽度时MODE_FIXED,否则MODE_SCROLLABLE</span><br><span class="line">                    tabLayout.setTabMode(TabLayout.MODE_FIXED);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    tabLayout.setTabMode(TabLayout.MODE_SCROLLABLE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (NoSuchFieldException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下划线和文字一样长,并且可以设置所tabitem的数量动态调整TabMode(MODE_FIXED|MODE_SCROLLABLE),可以设置margin和padding.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文讲解了TabLayout的常规使用:背景颜色,选中未选中颜色,指示器高度颜色…属性介绍<br>TabLayout大多和ViewPager配合使用:使用setupWithViewPager(viewpager)关联ViewPager,适配器还要实现getPagerTitle(position)方法返回title供TabLayout tabItem使用</p>]]></content>
      
      
        <tags>
            
            <tag> material design组件学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FloatingActionButton</title>
      <link href="/2017/11/07/FloatingActionButton/"/>
      <url>/2017/11/07/FloatingActionButton/</url>
      <content type="html"><![CDATA[<p>FloatingActionButton是Android Support Design Library库中的一个控件,类似一个圆形图片按钮</p><h1 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h1><p>使用FloatingActionButton要导入com.android.support:design库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:design:26.1.0&apos;</span><br></pre></td></tr></table></figure></p><h1 id="xml布局文件"><a href="#xml布局文件" class="headerlink" title="xml布局文件"></a>xml布局文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.FloatingActionButton</span><br><span class="line">        android:id=&quot;@+id/fab&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        app:fabSize=&quot;auto&quot;</span><br><span class="line">        app:elevation=&quot;1dp&quot;</span><br><span class="line">        android:src=&quot;@mipmap/add&quot;</span><br><span class="line">        android:clickable=&quot;true&quot;</span><br><span class="line">        app:backgroundTint=&quot;#33ce33&quot;</span><br><span class="line">        app:rippleColor=&quot;#0000ff&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure><p>使用简单,当做ImageBubbon使用,设置src 白色的”+”号.</p><h1 id="FloatingActionButton常用属性"><a href="#FloatingActionButton常用属性" class="headerlink" title="FloatingActionButton常用属性"></a>FloatingActionButton常用属性</h1><ol><li>app:fabSize:为了符合Material Design的设计风格，Google给出了FloatingActionButton的三种大小值：mini、normal、auto.</li><li>app:elevation=”6dp”：为了有投影悬浮效果，为FloatingActionButton设置一个高度值.<br>高度值越大，投影效果越淡，投影范围越大.高度值越小，投影效果越浓，投影范围越小.</li><li>app:rippleColor：为了符合Material Design的设计风格，为了使可点击的选项给用户反馈，点击时会有水波纹扩散的效果.<br>默认值是灰色的水波纹效果。如果设置rippleColor没有效果，记得设置属性android:clickable=”true”.</li><li>app:pressedTranslationZ=”10dp”：设置阴影的点击效果。与elevation控制的同一地方的阴影，不过elevation是非按压时的阴影效果，而pressedTranslationZ是点击按钮时阴影的效果.</li><li>app:backgroundTint： 改变FloatingActionButton的背景颜色.</li><li>android:src: 设置FloatingActionButton的背景内容<br>当然也可以在java代码中设置这些参数</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>FloatingActionButton使用简单,和ImageBotton类似,多一些ripple,投影效果</p>]]></content>
      
      
        <tags>
            
            <tag> material design组件学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Snackbar</title>
      <link href="/2017/11/07/Snackbar/"/>
      <url>/2017/11/07/Snackbar/</url>
      <content type="html"><![CDATA[<p>Snackbar是Android Support Design Library库中的一个控件，可以在屏幕底部快速弹出消息，比Toast更加好用。</p><h1 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h1><p>使用Snackbar要导入com.android.support:design库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:design:26.1.0&apos;</span><br></pre></td></tr></table></figure></p><h1 id="一般使用"><a href="#一般使用" class="headerlink" title="一般使用"></a>一般使用</h1><p>Snackbar基本使用和Toast类似<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Snackbar.make(view,&quot;hello world&quot;,Snackbar.LENGTH_INDEFINITE)</span><br><span class="line">        .setAction(&quot;你好&quot;, new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">//点击后关闭Snackbar</span><br><span class="line">Toast.makeText(SnackbarActivity.this,&quot;Snackbar被点击了&quot;,Toast.LENGTH_LONG).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure></p><p>属性解析:<br>make()生成Snackbar.<br>第一个参数是容纳view,推荐使用CoordinatorLayout来确保Snackbar和其他组件的交互,比如向右右滑动Snackbar可取消,Snackbar出现时FloatingActionButton上移.<br>第二个参数是提示内容.<br>第三个参数是显示时间:LENGTH_SHORT、LENGTH_LONG和LENGTH_INDEFINITE。<br>setAction()设置右侧按钮,可增加点击事件.如果不写setAction()则只显示左侧提示内容.<br>下图演示右滑Snackbar取消和点击Action弹出Toast提示<br><img src="/2017/11/07/Snackbar/snackbar1.gif" alt=""></p><h1 id="颜色修改"><a href="#颜色修改" class="headerlink" title="颜色修改"></a>颜色修改</h1><ol><li>Action 文字颜色修改<br>.setActionTextColor(color)即可</li><li>修改Snackbar背景颜色<br>api中并不能直接修改背景颜色,通过查看源码Snackbar加载了R.layout.design_layout_snackbar_include布局文件  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;merge xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">&lt;TextView</span><br><span class="line">        android:id=&quot;@+id/snackbar_text&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:paddingTop=&quot;14dp&quot;</span><br><span class="line">        android:paddingBottom=&quot;14dp&quot;</span><br><span class="line">        android:paddingLeft=&quot;12dp&quot;</span><br><span class="line">        android:paddingRight=&quot;12dp&quot;</span><br><span class="line">        android:textAppearance=&quot;@style/TextAppearance.Design.Snackbar.Message&quot;</span><br><span class="line">        android:maxLines=&quot;2&quot;</span><br><span class="line">        android:layout_gravity=&quot;center_vertical|left|start&quot;</span><br><span class="line">        android:ellipsize=&quot;end&quot;</span><br><span class="line">        android:textAlignment=&quot;viewStart&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">        android:id=&quot;@+id/snackbar_action&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;0dp&quot;</span><br><span class="line">        android:layout_marginStart=&quot;0dp&quot;</span><br><span class="line">        android:layout_gravity=&quot;center_vertical|right|end&quot;</span><br><span class="line">        android:paddingTop=&quot;14dp&quot;</span><br><span class="line">        android:paddingBottom=&quot;14dp&quot;</span><br><span class="line">        android:paddingLeft=&quot;12dp&quot;</span><br><span class="line">        android:paddingRight=&quot;12dp&quot;</span><br><span class="line">        android:visibility=&quot;gone&quot;</span><br><span class="line">        android:textColor=&quot;?attr/colorAccent&quot;</span><br><span class="line">        style=&quot;?attr/borderlessButtonStyle&quot;/&gt;</span><br><span class="line">&lt;/merge&gt;</span><br></pre></td></tr></table></figure></li></ol><p>TextView:Snackbar左侧的message,Button是右侧的Action<br>修改Snackbar背景颜色和message字体颜色就是这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void setSnackbarColor(Snackbar snackbar, int messageColor, int backgroundColor) &#123;</span><br><span class="line">    View view = snackbar.getView();//获取Snackbar的view</span><br><span class="line">    if(view!=null)&#123;</span><br><span class="line">        view.setBackgroundColor(backgroundColor);//修改view的背景色</span><br><span class="line">        ((TextView) view.findViewById(R.id.snackbar_text)).setTextColor(messageColor);//获取Snackbar的message控件，修改字体颜色</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单修改代码就能改变背景颜色,message字体颜色<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">final Snackbar make = Snackbar.make(coordinatorLayout, &quot;hello world&quot;, Snackbar.LENGTH_INDEFINITE);</span><br><span class="line">setSnackbarColor(make,getResources().getColor(R.color.black),getResources().getColor(R.color.colorAccent));</span><br><span class="line">make.setActionTextColor(getResources().getColor(R.color.blue));</span><br><span class="line">tv.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        make.setAction(&quot;你好&quot;, new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                Toast.makeText(SnackbarActivity.this,&quot;Snackbar Action被点击了&quot;,Toast.LENGTH_LONG).show();</span><br><span class="line">             &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">     .show();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>效果图:<br><img src="/2017/11/07/Snackbar/1.png" alt=""><br>背景变成了红色,Message字体颜色为黑色,Action字体颜色蓝色</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Snackbar使用和Toast很是相似,出现在所有屏幕其他元素之上,make()生成Snackbar,show()显示.<br>可以设置action设置右侧按钮,增加交互<br>Snackbar样式修改,可直接通过setActionTextColor()修改action按钮颜色,要想修改背景和message颜色,就需要snackbar.getView()修改背景颜色,findviewbyid修改snackbar_text颜色<br>最后推荐Snackbar和CoordinatioLayout配合使用,以达到和其他组件(比如FloatingActionButton)交互效果,后面会讲到CoorinationLayout  </p><p>参考:<a href="http://www.jianshu.com/p/cd1e80e64311/" target="_blank" rel="noopener">http://www.jianshu.com/p/cd1e80e64311/</a></p>]]></content>
      
      
        <tags>
            
            <tag> material design组件学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Toolbar</title>
      <link href="/2017/11/06/Toolbar/"/>
      <url>/2017/11/06/Toolbar/</url>
      <content type="html"><![CDATA[<h1 id="Toolbar简介"><a href="#Toolbar简介" class="headerlink" title="Toolbar简介"></a>Toolbar简介</h1><p>ToolBar是Android 5.0推出的一个新的导航控件用于取代之前的ActionBar，由于其高度的可定制性、灵活性、具有Material Design风格等优点，越来越多的应用也用上了ToolBar，比如常用的知乎软件其顶部导航栏正是使用ToolBar。官方考虑到仍有一部分用户的手机版本号低于5.0，所以，ToolBar也放进了support v7包内，使得低版本的系统也能使用上ToolBar。本文将使用support v7支持包的ToolBar来进行讲解，包括其基本用法、样式定制等知识点。</p><h1 id="引入support-v7支持包"><a href="#引入support-v7支持包" class="headerlink" title="引入support v7支持包"></a>引入support v7支持包</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;com.android.support:appcompat-v7:26.1.0&apos;</span><br></pre></td></tr></table></figure><h1 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h1><p>需要使用此支持包内主题Theme.AppCompat<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h1 id="xml布局文件"><a href="#xml布局文件" class="headerlink" title="xml布局文件"></a>xml布局文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.Toolbar</span><br><span class="line">        android:id=&quot;@+id/tbar&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=&quot;@+id/tv_title&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot;tv标题&quot; /&gt;</span><br><span class="line">    &lt;/android.support.v7.widget.Toolbar&gt;</span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure><p>效果图:<br><img src="/2017/11/06/Toolbar/t1.png" alt=""><br>Toolbar正常显示,没有设置背景色所以看不到具体高度.继续</p><h1 id="属性设置"><a href="#属性设置" class="headerlink" title="属性设置"></a>属性设置</h1><h2 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h2><p>可以直接添加background,但是为了统一,使用?attr/colorPrimary. Toolbar中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:background=&quot;?attr/colorPrimary&quot;</span><br></pre></td></tr></table></figure></p><p><img src="/2017/11/06/Toolbar/t2.png" alt=""></p><h2 id="title-subtitle-logo-navigation…"><a href="#title-subtitle-logo-navigation…" class="headerlink" title="title,subtitle,logo,navigation…"></a>title,subtitle,logo,navigation…</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Toolbar toolbar = findViewById(R.id.tbar);</span><br><span class="line">toolbar.setLogo(R.mipmap.ic_launcher);</span><br><span class="line">toolbar.setTitle(&quot;Title&quot;);</span><br><span class="line">toolbar.setSubtitle(&quot;Subtitle&quot;);</span><br><span class="line">setSupportActionBar(toolbar);//把toolbar作为操作栏,必不可少</span><br><span class="line">toolbar.setNavigationIcon(R.mipmap.nav);</span><br></pre></td></tr></table></figure><p>效果图:<br><img src="/2017/11/06/Toolbar/t3.png" alt=""><br>如果你想修改标题和子标题的字体大小、颜色等，可以调用 setTitleTextColor 、 setTitleTextAppearance 、 setSubtitleTextColor 、 setSubtitleTextAppearance 这些API。  </p><p>这些属性也可在.xml文件中设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.Toolbar</span><br><span class="line">        ...</span><br><span class="line">        app:logo=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        app:subtitle=&quot;subtitle&quot;</span><br><span class="line">        app:title=&quot;Title&quot;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="添加菜单选项"><a href="#添加菜单选项" class="headerlink" title="添加菜单选项"></a>添加菜单选项</h2><p>新建res/menu/menu_toolbar.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/share&quot;</span><br><span class="line">        android:title=&quot;分析&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/share&quot;</span><br><span class="line">        app:showAsAction=&quot;ifRoom&quot;/&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/search&quot;</span><br><span class="line">        android:title=&quot;搜索&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/search&quot;</span><br><span class="line">        app:showAsAction=&quot;ifRoom&quot;/&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/collection&quot;</span><br><span class="line">        android:title=&quot;收藏&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/collection&quot;</span><br><span class="line">        app:showAsAction=&quot;ifRoom&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/setting&quot;</span><br><span class="line">        android:title=&quot;设置&quot;</span><br><span class="line">        app:showAsAction=&quot;never&quot;/&gt;</span><br><span class="line">&lt;/menu&gt;</span><br></pre></td></tr></table></figure></p><p>app:showAsAction=”ifRoom|never”;ifRoom:toolbar能放得下,就显示在toolbar,否则折叠到更多;never直接折叠到更多  </p><p>Activity重新onCreateOptionMenu(),将此菜单加载进去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean onCreateOptionsMenu(Menu menu) &#123;</span><br><span class="line">    getMenuInflater().inflate(R.menu.menu_toolbar,menu);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果图:<br><img src="/2017/11/06/Toolbar/t4.png" alt=""></p><p>若没有出现menu,请检查是否有将toolbar作为操作栏:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setSupportActionBar(toolbar);//把toolbar作为操作栏,必不可少</span><br></pre></td></tr></table></figure></p><h2 id="添加点击事件"><a href="#添加点击事件" class="headerlink" title="添加点击事件"></a>添加点击事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onMenuItemClick(MenuItem item) &#123;</span><br><span class="line">        int itemId = item.getItemId();</span><br><span class="line">        String s = &quot;&quot;;</span><br><span class="line">        switch (itemId)&#123;</span><br><span class="line">            case R.id.share:</span><br><span class="line">                s = &quot;share&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case R.id.search:</span><br><span class="line">                s = &quot;search&quot;;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        Toast.makeText(ToolBarActivity.this,s+&quot; 被点击&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="样式修改-美化"><a href="#样式修改-美化" class="headerlink" title="样式修改(美化)"></a>样式修改(美化)</h2><ol><li>上图可以看出右边3个竖排圆点式黑色的,如果想修改为白色?<br>主题中设置: android:textColorSecondary  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;item name=&quot;android:textColorSecondary&quot;&gt;#ffffff&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/2017/11/06/Toolbar/t6.png" alt=""></p><ol><li>popup menu背景颜色字体颜色修改  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- toolbar弹出菜单样式 --&gt;</span><br><span class="line">&lt;style name=&quot;ToolbarPopupTheme&quot; parent=&quot;@style/ThemeOverlay.AppCompat.Dark&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:colorBackground&quot;&gt;#000000&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><p>toolbar添加属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toolbar:popupTheme=&quot;@style/toolbarpopuptheme&quot;</span><br></pre></td></tr></table></figure></p><p>效果图<br><img src="/2017/11/06/Toolbar/t7.png" alt=""><br>如此就能改变menu弹出菜单的背景颜色,同时文字颜色也会自动调整  </p><ol><li>修改popup menu 弹出位置<br>默认情况popup menu覆盖在toolbar上,如上图.想要其在toolbar下方<br>修改styles.xml:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;ToolbarPopupTheme&quot; parent=&quot;@style/ThemeOverlay.AppCompat.Dark&quot;&gt;    </span><br><span class="line">    &lt;item name=&quot;android:colorBackground&quot;&gt;#000000&lt;/item&gt;    </span><br><span class="line">    &lt;item name=&quot;actionOverflowMenuStyle&quot;&gt;@style/OverflowMenuStyle&lt;/item&gt; &lt;!--新增一个item，用于控制menu--&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;style name=&quot;OverflowMenuStyle&quot; parent=&quot;Widget.AppCompat.Light.PopupMenu.Overflow&quot;&gt;   </span><br><span class="line">     &lt;item name=&quot;overlapAnchor&quot;&gt;false&lt;/item&gt;  &lt;!--把该属性改为false即可使menu位置位于toolbar之下--&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><p>效果图:<br><img src="/2017/11/06/Toolbar/t8.png" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Toolbar使用比较简单(设置title,logo…,popup menu),美化.<br>做个小结  </p><ol><li>向下兼容用v7包(引入support v7包)</li><li>主题使用v7包的Theme.AppCompay</li><li>一系列的参数设置(title,logo…),可以在代码中写,也可以做xml文件中写</li><li>添加菜单项:新建menu文件,Activity重写onCreateOptionMenu方法,并在此方法中加载menu</li><li>menu点击事件setOnMenuItemClickListener()</li><li>样式修改(美化):更多选项图标颜色修改;popup menu背景颜色修改;弹出框弹出位置修改.</li></ol>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> material design组件学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DrawerLayout</title>
      <link href="/2017/11/03/DrawerLayout/"/>
      <url>/2017/11/03/DrawerLayout/</url>
      <content type="html"><![CDATA[<p>DrawerLayout:抽屉布局;DrawerLayout + NavigationView 效果绝佳.<br>使用DrawerLayout需要导入Design包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:design:26.1.0&apos;</span><br></pre></td></tr></table></figure></p><h1 id="xml"><a href="#xml" class="headerlink" title=".xml"></a>.xml</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v4.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    android:id=&quot;@+id/dl&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:paddingTop=&quot;@dimen/tool_bar_top_padding&quot;</span><br><span class="line">        android:background=&quot;#33ff0000&quot;&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot;content&quot;</span><br><span class="line">            android:textSize=&quot;24sp&quot;/&gt;</span><br><span class="line">    &lt;/RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.NavigationView</span><br><span class="line">        android:id=&quot;@+id/nav&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:layout_gravity=&quot;start&quot;</span><br><span class="line">        app:menu=&quot;@menu/draw_menu&quot;</span><br><span class="line">app:headerLayout=&quot;@layout/nav_headerlayout&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android.support.design.widget.NavigationView&gt;</span><br></pre></td></tr></table></figure><p>最外层是DrawerLayout,包含2部分内容:<br>主内容一定要是DrawerLayout的第一个子视图,并且宽高都是math_parent[上例RelativeLayout为主内容];<br>NavigationView为抽屉. 关键:此属性android:layout_gravity=”start”定义抽屉从左滑出,或”end”从右滑出,不推荐使用left和right.<br>NavigationView:为导航菜单,后面会具体讲解.</p><h1 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h1><p>DrawerLayout.DrawerLayoutListener作为监听器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">drawerLayout.addDrawerListener(new MyDrawerListener());</span><br><span class="line">private class MyDrawerListener implements DrawerLayout.DrawerListener&#123;</span><br><span class="line">        public void onDrawerSlide(View drawerView, float slideOffset) &#123;</span><br><span class="line">            //当抽屉被滑动时调用 滑动幅度0-1</span><br><span class="line">        &#125;</span><br><span class="line">        public void onDrawerOpened(View drawerView) &#123;</span><br><span class="line">            //抽屉完全被打开</span><br><span class="line">        &#125;</span><br><span class="line">        public void onDrawerClosed(View drawerView) &#123;</span><br><span class="line">            //抽屉完全被关闭</span><br><span class="line">        &#125;</span><br><span class="line">        public void onDrawerStateChanged(int newState) &#123;</span><br><span class="line">            //当抽屉状态改变时候被调用</span><br><span class="line">            //状态是state:0(闲置);1(拖拽);2(固定)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>或设置DrawerListener的子类SimpleDrawerListener，使用这个类的时候不必实现全部的回调函数，可以根据自己的需要重写相应的方法。</p><h1 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h1><p>上例xml中的NavigationView可以换成别的来定义侧滑菜单部分,但是需要花费时间.使用NavigationView简单,统一.<br>NavigationView分为两部分,上面一部分叫做HeaderLayout,下面的是Menu</p><h2 id="NavigationView属性"><a href="#NavigationView属性" class="headerlink" title="NavigationView属性"></a>NavigationView属性</h2><p>上例NavigationView部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.design.widget.NavigationView</span><br><span class="line">        android:id=&quot;@+id/nav&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:layout_gravity=&quot;start&quot;</span><br><span class="line">        app:menu=&quot;@menu/draw_menu&quot;</span><br><span class="line">app:headerLayout=&quot;@layout/nav_headerlayout&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>属性解释:</p><ol><li>android:layout_gravity=”start”:表示该view从左侧滑出(end:右侧),<strong>必须指定</strong>.</li><li>app:headerLayout=”@layout/nav_headerlayout”:引用一个头部布局,就是图1上面的蓝色背景部分,包含背景和用户名welau.</li><li>app:menu=”@menu/draw_menu”:引用一个menu作为下面的点击项.<br>HeaderLayout布局nav_headerlayout.xml:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;100dp&quot;</span><br><span class="line">    android:background=&quot;#4400ffff&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/tv_headerlayout&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">        android:layout_marginTop=&quot;@dimen/tool_bar_top_padding&quot;</span><br><span class="line">        android:text=&quot;welau&quot;</span><br><span class="line">        android:textSize=&quot;24sp&quot; /&gt;</span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure></li></ol><p>Menu文件draw_menu.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/item1&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:title=&quot;定制&quot;/&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/item2&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:title=&quot;我的&quot;/&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/item3&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:title=&quot;设置&quot;/&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/item4&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:title=&quot;关于&quot;/&gt;</span><br><span class="line">&lt;/menu&gt;</span><br></pre></td></tr></table></figure></p><p>看看效果<br><img src="/2017/11/03/DrawerLayout/demo1.png" alt=""><br>问题:图片都变成了灰色!!!</p><ol><li>NavigationView布局中添加app:itemIconTint=”#f00”,那么图标就变成了红色!!!<br><img src="/2017/11/03/DrawerLayout/demo2.png" alt=""></li><li>使用原图显示,在java代码中设置:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigationView.setItemIconTintList(null);</span><br></pre></td></tr></table></figure></li></ol><p><img src="/2017/11/03/DrawerLayout/demo3.png" alt=""></p><p>还有2个常用属性:</p><ol><li>app:itemBackground=”@color/colorAccent”设置item的背景颜色</li><li>app:itemTextColor=””设置item的文字颜色</li></ol><h2 id="Menu属性"><a href="#Menu属性" class="headerlink" title="Menu属性"></a>Menu属性</h2><p>menu item间添加分割线:<br>使用group,并给该group设置id(必须设置,不然无效)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;group android:id=&quot;@+id/g1&quot;&gt;</span><br><span class="line">        &lt;item</span><br><span class="line">            android:id=&quot;@+id/item1&quot;</span><br><span class="line">            android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">            android:title=&quot;定制&quot; /&gt;</span><br><span class="line">    &lt;/group&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/item2&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:title=&quot;我的&quot; /&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/item3&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:title=&quot;设置&quot; /&gt;</span><br><span class="line">    &lt;group android:id=&quot;@+id/g2&quot;&gt;</span><br><span class="line">        &lt;item</span><br><span class="line">            android:id=&quot;@+id/item4&quot;</span><br><span class="line">            android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">            android:title=&quot;关于&quot; /&gt;</span><br><span class="line">    &lt;/group&gt;</span><br><span class="line">&lt;/menu&gt;</span><br></pre></td></tr></table></figure></p><p>效果图:<br><img src="/2017/11/03/DrawerLayout/demo4.png" alt=""></p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="头部点击事件"><a href="#头部点击事件" class="headerlink" title="头部点击事件"></a>头部点击事件</h3><p>获取头部控件HeaderLayout:例子中的nav_headerlayout.layout<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//获取头布局文件  </span><br><span class="line">View headerView = navigationView.getHeaderView(0);</span><br></pre></td></tr></table></figure></p><p>通过headerView.findViewById()获取HeaderLayout中的view<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">View headerView = navigationView.getHeaderView(0);</span><br><span class="line">        TextView tv_name = headerView.findViewById(R.id.tv_name);</span><br><span class="line">        tv_name.setText(&quot;header&quot;);</span><br></pre></td></tr></table></figure></p><p>效果图:<br><img src="/2017/11/03/DrawerLayout/demo5.png" alt=""></p><h3 id="Menu-item点击事件"><a href="#Menu-item点击事件" class="headerlink" title="Menu item点击事件"></a>Menu item点击事件</h3><p>navigationView.setNavigationItemSelectedListener(NavigationItemSelectedListener)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean onNavigationItemSelected(@NonNull MenuItem item) &#123;</span><br><span class="line">                int itemId = item.getItemId();</span><br><span class="line">                switch (itemId) &#123;</span><br><span class="line">                    case R.id.item1:</span><br><span class="line">                        Toast.makeText(DrawerLayoutActivity.this,&quot;item1被点击&quot;,Toast.LENGTH_LONG).show();</span><br><span class="line">                        break;</span><br><span class="line">                    case R.id.item2:</span><br><span class="line">                        break;</span><br><span class="line">                    case R.id.item3:</span><br><span class="line">                        break;</span><br><span class="line">                    case R.id.item4:</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>效果图:<br><img src="/2017/11/03/DrawerLayout/demo6.png" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>DrawerLayout:抽屉布局,第一个Layout为主内容区域,侧滑菜单必须指定android:layout_gravity=”start|end”;  </li><li>DrawerLayout事件:drawerLayout.addDrawerListener(DrawerListener)</li><li>侧滑菜单可是自己写也可以使用NavigationView;</li><li>NavigationView中app:headerLayout引入头部布局,常见app显示图片加文字; app:menu引入item;</li><li>NavigationView 通过getHeaderView获取引入的头部布局;</li><li>NavigationView menu item的点击事件:setNavigationItemSelectedListener()</li></ol>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> material design组件学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TextInputLayout</title>
      <link href="/2017/11/03/TextInputLayout/"/>
      <url>/2017/11/03/TextInputLayout/</url>
      <content type="html"><![CDATA[<p><img src="/2017/11/03/TextInputLayout/til.gif" alt=""><br>TextInputLayout是用来增强Edittext[TextInputEditText]，使用的时候包裹Edittext。当edittext获取焦点是，edittext的hint值就会浮到edittext的上方;setError(str)下方出现提示</p><a id="more"></a><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><p>TextInputLayout是在Material Design中的,如果我们要使用的话,必须在gradle文件中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &apos;com.android.support:appcompat-v7:25.0.1&apos;</span><br><span class="line">    compile &apos;com.android.support:design:25.0.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用-（xml）"><a href="#使用-（xml）" class="headerlink" title="使用 （xml）"></a>使用 （xml）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.design.widget.TextInputLayout</span><br><span class="line">        android:id=&quot;@+id/til_1&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        app:layout_constraintEnd_toEndOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;EditText</span><br><span class="line">            android:id=&quot;@+id/et_1&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:hint=&quot;name&quot; /&gt;</span><br><span class="line">    &lt;/android.support.design.widget.TextInputLayout&gt;</span><br></pre></td></tr></table></figure><p>使用TextInputLayout包裹一个（只能是一个）EdiTtext。hint可以在TextInputLayout或EditText中设置。</p><h1 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h1><h2 id="浮动标签（hintEnable）"><a href="#浮动标签（hintEnable）" class="headerlink" title="浮动标签（hintEnable）"></a>浮动标签（hintEnable）</h2><p>若想关闭浮动标签（默认开启）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:hintEnable=&quot;false&quot;</span><br></pre></td></tr></table></figure></p><h2 id="浮动标签过渡动画"><a href="#浮动标签过渡动画" class="headerlink" title="浮动标签过渡动画"></a>浮动标签过渡动画</h2><p>浮动标签显示与隐藏之间有一个过渡动画(默认是开启的),可以通过以下方法设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:hintAnimationEnabled=&quot;false&quot;</span><br></pre></td></tr></table></figure></p><h2 id="计数器（counterEnable）"><a href="#计数器（counterEnable）" class="headerlink" title="计数器（counterEnable）"></a>计数器（counterEnable）</h2><p>如果我们想要在账号那栏后面加个字数统计,例如当我们的账号是固定位数时(例如手机号码,),我们可以让用户看到自己当前输入的长度,我们只需要在TextInputLayout加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:counterEnabled=&quot;true&quot;</span><br></pre></td></tr></table></figure></p><h2 id="设置最大长度"><a href="#设置最大长度" class="headerlink" title="设置最大长度"></a>设置最大长度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:counterMaxLength=&quot;11&quot;</span><br></pre></td></tr></table></figure><p><img src="/2017/11/03/TextInputLayout/til_counter.png" alt=""><br>此属性并不能限制用户输入，而是用另一种颜色提示用户输入长度超过了设置长度</p><h2 id="setError-错误提示"><a href="#setError-错误提示" class="headerlink" title="setError() 错误提示"></a>setError() 错误提示</h2><p>TextInputLayout提供了错误提示的方法，出现在EditText下方；setError（null）取消错误提示</p><h2 id="密码可见按钮"><a href="#密码可见按钮" class="headerlink" title="密码可见按钮"></a>密码可见按钮</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:passwordToggleEnabled=&quot;true&quot; //默认是关闭的</span><br></pre></td></tr></table></figure><p>需要在子EditText中加入属性android:inpuTtype=”textPassword”<br><img src="/2017/11/03/TextInputLayout/til_pwdtoggle.png" alt=""></p><h3 id="自定义密码可见按钮图标"><a href="#自定义密码可见按钮图标" class="headerlink" title="自定义密码可见按钮图标"></a>自定义密码可见按钮图标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:passwordToggleDrawable=&quot;@mipmap/ic_launcher&quot;</span><br></pre></td></tr></table></figure><h3 id="密码可见按钮上色"><a href="#密码可见按钮上色" class="headerlink" title="密码可见按钮上色"></a>密码可见按钮上色</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:passwordToggleTint=&quot;@color/colorAccent&quot;</span><br></pre></td></tr></table></figure><h3 id="密码可见按钮设置模式"><a href="#密码可见按钮设置模式" class="headerlink" title="密码可见按钮设置模式"></a>密码可见按钮设置模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//screen,src_in,src_atop,src_over,multiply等几种设计模式</span><br><span class="line">app:passwordToggleTintMode=&quot;screen&quot; //screen</span><br></pre></td></tr></table></figure><h2 id="自定义浮动标签"><a href="#自定义浮动标签" class="headerlink" title="自定义浮动标签"></a>自定义浮动标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:hintTextAppearance=&quot;@style/hintAppearance&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;hintAppearance&quot; parent=&quot;TextAppearance.AppCompat&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;android:textSize&quot;&gt;14sp&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:textColor&quot;&gt;#ffee00&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="自定义错误提示样式"><a href="#自定义错误提示样式" class="headerlink" title="自定义错误提示样式"></a>自定义错误提示样式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:errorTextAppearance=&quot;@style/errorAppearance&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;errorAppearance&quot; parent=&quot;TextAppearance.AppCompat&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;android:textSize&quot;&gt;14sp&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:textColor&quot;&gt;@color/red&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="补充（EditText-和-TextInputEditText区别）"><a href="#补充（EditText-和-TextInputEditText区别）" class="headerlink" title="补充（EditText 和 TextInputEditText区别）"></a>补充（EditText 和 TextInputEditText区别）</h1><p>继承关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">   ↳    android.view.View</span><br><span class="line">        ↳    android.widget.TextView</span><br><span class="line">             ↳    android.widget.EditText</span><br><span class="line">                  ↳    android.support.v7.widget.AppCompatEditText</span><br><span class="line">                       ↳    android.support.design.widget.TextInputEditText</span><br></pre></td></tr></table></figure></p><p>TextInputEditText作为EditText的子类，为TextInputLayout设计的一个子容器。输入法在’extract’模式的时候，使用TextInputEditText类允许显示提示，而EditText则没有。<br><img src="/2017/11/03/TextInputLayout/textinputedittext.gif" alt=""><br>上图，用户名使用的事EditText。密码使用的是TextInputEditText,可以看到输入的时候都变成了全屏模式，用户名使用EidtText的时候hint就隐藏了，而密码使用TextInputEditText的时候hint可以正常显示。<br>由此可见TextInputEditText的设计就是修复了这个缺陷，所以TextInputLayout和TextInputEditText配合使用的效果最好!</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>TextInputLayout包裹EditText，帮助EditText做些事情：<br>1.hint提到EditText头上去；<br>2.错误提示放在下发；EditTEXT原本也有错误提示，在输入框右边；<br>3.密码小眼睛（app:passwordToggleEnabled=”true”）。<br>4.TextInputLayout应和TextInputEditText配合使用，不推荐配合EditText使用。  </p><p>参考:<br><a href="http://blog.csdn.net/johnny901114/article/details/51918436" target="_blank" rel="noopener">http://blog.csdn.net/johnny901114/article/details/51918436</a><br><a href="http://www.jianshu.com/p/a9b48dee86e0" target="_blank" rel="noopener">http://www.jianshu.com/p/a9b48dee86e0</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> material design组件学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ConstraintLayout-进阶的RelativeLayout</title>
      <link href="/2017/11/02/ConstraintLayout-%E8%BF%9B%E9%98%B6%E7%9A%84RelativeLayout/"/>
      <url>/2017/11/02/ConstraintLayout-%E8%BF%9B%E9%98%B6%E7%9A%84RelativeLayout/</url>
      <content type="html"><![CDATA[<p>伴随着Android Studio 2.2的正式推送,最大的亮点是布局的蓝图模式以及与之配套的ConstraintLayout关注度一下子高了起来.  </p><p>ConstraintLayout,翻译过来,可以叫约束布局,其子view就是通过一个个属性的约束,来决定自己的位置,大小,而传统的RelativeLayout也类似,所以可以看成是RelativeLayout的一种进化版版本,属性布局用法相对RelativeLayout来说较为复杂,但是当你熟悉之后你会爱上它的.  </p><p>众所周知,Android APP的布局复杂度会极大的影响程序的流畅度,传统的ViewGroup用的最多的就是RelativeLayout与LineaLayout.  </p><p>一般能用RelativeLayout替换LineaLayout就替换,因为LinearLayout虽然简单,但是会加深层级.  </p><p>而有时候却不得不使用LinearLayout,在于LinearLayout有一个layout_weight属性,可以设置LinearLayout的ChildView按照一定的比例布局,这是RelativeLayout做不到的.  </p><p>ConstraintLayout的其他的属性和用法基本与RelativeLayout一致,如果对RelativeLayout比较熟悉的童鞋很容易上手,而ConstraintLayout<strong>最大的优点便是可以添加比例的控制</strong>.  </p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>ConstraintLayout约束布局的含义: 根据布局中的其他元素或视图, 确定View在屏幕中的位置, 受到三类约束, 即其他视图, 父容器(parent), 基准线(Guideline).<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layout_constraint[本源位置]_[目标位置]=&quot;[目标ID]&quot;</span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:layout_constraintBottom_toBottomOf=&quot;@+id/constraintLayout&quot;</span><br></pre></td></tr></table></figure></p><p>约束当前View的底部至目标View的底部, 目标View是constraintLayout. 即, 把当前View的底部对齐到constraintLayout的底部.  </p><h1 id="基本约束属性"><a href="#基本约束属性" class="headerlink" title="基本约束属性"></a>基本约束属性</h1><p>ConstraintLayout是RelativeLayout的进化版,如果RelativeLayout的子view没有设置任何基本属性,则置于左上角,ConstraintLayout同理.  </p><p>ConstraintLayout基本属性的值可以是某个控件的id,也可以是”parent”,简单的概括就是top,bottom,left,right,baseline.  </p><h1 id="约束属性值为id时对照表"><a href="#约束属性值为id时对照表" class="headerlink" title="约束属性值为id时对照表"></a>约束属性值为id时对照表</h1><p><img src="/2017/11/02/ConstraintLayout-进阶的RelativeLayout/duizhao.png" alt="对照表"></p><h1 id="约束属性值等于parent"><a href="#约束属性值等于parent" class="headerlink" title="约束属性值等于parent"></a>约束属性值等于parent</h1><p>当基本属性值为parent时,必须成对出现才有意义,即top与bottom,left与right,start与end成对.  </p><h1 id="比例属性闪亮登场"><a href="#比例属性闪亮登场" class="headerlink" title="比例属性闪亮登场"></a>比例属性闪亮登场</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layout_constraintHorizontal_bias=&quot;0.4&quot;</span><br><span class="line">layout_constraintVertical_bias=&quot;0.6&quot;</span><br></pre></td></tr></table></figure><p>这两个属性接受浮点型,是一个比例,数值在0-1之间,如不写这属性,默认为0.5  </p><p>点击左下角切换的Design,再点击Button选中这个控件,右边栏会出现约束属性图  </p><p><img src="/2017/11/02/ConstraintLayout-进阶的RelativeLayout/constraintVertical_bias.png" alt=""></p><p>属性理解：</p><ol><li>箭头向里 表示控件的宽度/高度是适应内容的,弹簧状（“工”字形） 表示控件是宽度/高度是具体数值</li><li>上下两个0表示控件的上下margin是0dp</li><li>小球50这个数值表示在垂直方向上,上下的比例是0.5:0.5<br>鼠标拖动小球,上下移动会发现数值,控件垂直方向上的位置都跟着改变.拖动到20,切换到代码,会发现代码新增了一个属性,此时控件的上下比例是:0.2<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:layout_constraintVertical_bias=&quot;0.2&quot;</span><br></pre></td></tr></table></figure></li></ol><h1 id="控件大小比例属性"><a href="#控件大小比例属性" class="headerlink" title="控件大小比例属性"></a>控件大小比例属性</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:layout_constraintDimensionRatio=&quot;1:2&quot;</span><br></pre></td></tr></table></figure><p>子view控制自身的宽高比（宽高1:2）<br>**注意：</p><ol><li>这个属性生效需要以下条件：left，right，top，bottom 四条边中至少一个约束</li><li>宽高有且只有一个是0dp**</li></ol><h1 id="Guideline导航线"><a href="#Guideline导航线" class="headerlink" title="Guideline导航线"></a>Guideline导航线</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app:layout_constraintGuide_begin=&quot;50dp&quot;</span><br><span class="line">app:layout_constraintGuide_end=&quot;50dp&quot;</span><br><span class="line">app:layout_constraintGuide_percent=&quot;50&quot;</span><br></pre></td></tr></table></figure><p>介绍导航线之前,先想一下,根据上面对ConstraintLayout的介绍,要你布置一个菜单控件,菜单栏每一项均分屏幕宽度,按照以前使用LinearLayout,会把每一个子view的weight设置为1,则均分了屏幕宽度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout&gt;</span><br><span class="line">    &lt;View/&gt;</span><br><span class="line">    &lt;View/&gt;</span><br><span class="line">    &lt;View/&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p><p>而使用ConstraintLayout则会发现前面介绍的比例,是相对parent来说的,如果要均分屏幕宽度,必须借助透明的分割线来布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ConstraintLayout&gt;</span><br><span class="line">    &lt;View,右边约束分割线1/&gt;</span><br><span class="line">    &lt;分割线1,距离左边33%/&gt;</span><br><span class="line">    &lt;View,左边约束分割线1,右边约束分割线2/&gt;</span><br><span class="line">    &lt;分割线2,距离左边66%/&gt;</span><br><span class="line">    &lt;View,左边约束分割线2/&gt;</span><br><span class="line">&lt;/ConstraintLayout&gt;</span><br></pre></td></tr></table></figure></p><p>而这个分割线其实谷歌已经帮我们写好了,就是Guideline.蓝图介绍中,6对应的就是添加导航线.切换到蓝图模式,点击6,就可以添加一个水平/垂直的导航线  </p><p><img src="/2017/11/02/ConstraintLayout-进阶的RelativeLayout/guide.png" alt=""></p><p>添加垂直导航线</p><p><img src="/2017/11/02/ConstraintLayout-进阶的RelativeLayout/guide_ver.png" alt=""></p><p>Guideline属性对照表</p><p><img src="/2017/11/02/ConstraintLayout-进阶的RelativeLayout/guide_dzb.png" alt=""></p><p>Guideline属性值</p><p>Guideline本身对于用户来说是不可见的,所以其宽高的值没有任何意义,也不起作用.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.constraint.Guideline</span><br><span class="line">    android:id=&quot;@+id/guideline&quot;</span><br><span class="line">    android:layout_width=&quot;wrap_content&quot;//无意义</span><br><span class="line">    android:layout_height=&quot;10dp&quot;//无意义</span><br><span class="line">    android:orientation=&quot;vertical&quot;//决定这是一条水平导航线还是垂直导航线</span><br><span class="line">    app:layout_constraintGuide_percent=&quot;0.333&quot;//决定导航线的位置</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p><p>此时再添加一条比例为0.666的导航线,即可三等分屏幕<br><img src="/2017/11/02/ConstraintLayout-进阶的RelativeLayout/guide_menu.png" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>有了GuideLine就可以抛弃LinearLayout。单单使用ConstraintLayout写布局，减少布局层级。  </p><p>参考：<a href="http://www.jianshu.com/p/d64d845b6b90" target="_blank" rel="noopener">http://www.jianshu.com/p/d64d845b6b90</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>android material design组件学习</title>
      <link href="/2017/11/02/android-material-design%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/11/02/android-material-design%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a><a href="/2017/11/03/TextInputLayout/" title="TextInputLayout">TextInputLayout</a></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a><a href="/2017/11/06/Toolbar/" title="Toolbar">Toolbar</a></h1><h1 id="-2"><a href="#-2" class="headerlink" title=""></a><a href="/2017/11/03/DrawerLayout/" title="DrawerLayout">DrawerLayout</a></h1><h1 id="-3"><a href="#-3" class="headerlink" title=""></a><a href="/2017/11/07/Snackbar/" title="Snackbar">Snackbar</a></h1><h1 id="-4"><a href="#-4" class="headerlink" title=""></a><a href="/2017/11/07/FloatingActionButton/" title="FloatingActionButton">FloatingActionButton</a></h1><h1 id="-5"><a href="#-5" class="headerlink" title=""></a><a href="/2017/11/07/TabLayout/" title="TabLayout">TabLayout</a></h1>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> material design组件学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android material design</title>
      <link href="/2017/11/02/android-material-design/"/>
      <url>/2017/11/02/android-material-design/</url>
      <content type="html"><![CDATA[<h1 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h1><p>material design的核心思想，就是把物理世界的体验带进屏幕。去掉现实中的杂质和随机性，保留其最原始纯净的形态、空间关系、变化与过渡，配合虚拟世界的灵活特性，还原最贴近真实的体验，达到简洁与直观的效果。</p><p>参考：<a href="http://www.uisdc.com/comprehensive-material-design-note" target="_blank" rel="noopener">http://www.uisdc.com/comprehensive-material-design-note</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>标签（tags）使用</title>
      <link href="/2017/10/31/%E6%A0%87%E7%AD%BE%EF%BC%88tags%EF%BC%89%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/10/31/%E6%A0%87%E7%AD%BE%EF%BC%88tags%EF%BC%89%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>标签（tags）使用教程</p><p>1.新建页面，<strong>命名为tags</strong>；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure></p><p>2.编辑刚新建的页面<strong>（source/tags/index.md）</strong>，将页面的类型设置为tags，主题将自动为这个页面显示标签云；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2017-10-31 12:26:42</span><br><span class="line">type: &quot;tags&quot;//这里</span><br></pre></td></tr></table></figure></p><p>*注意：如果有启用多说或Disqus评论，默认页面也会带有评论。需要关闭的话，请添加字段comments并将其值设置为false，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2017-10-31 12:26:42</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false//这里</span><br></pre></td></tr></table></figure></p><p>3.在菜单中添加链接。编辑<strong>主题配置文件</strong>，添加tags到menu中；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  首页: / || home</span><br><span class="line">  标签: /tags/ || tags //这里</span><br><span class="line">  归档: /archives/ || archive</span><br><span class="line">  关于: /about/ || user</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> hexo 教程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo 引用图片</title>
      <link href="/2017/10/30/hexo-%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87/"/>
      <url>/2017/10/30/hexo-%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p><img src="/2017/10/30/hexo-引用图片/test.jpg" alt="描述信息"><br><a id="more"></a><br>hexo可通过插件引用图片 hexo-asset-image.<br>新建文章：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;hexo-引用图片&quot;</span><br></pre></td></tr></table></figure></p><p>在source/_posts目录下会生成“hexo-引用图片”文件夹和“hexo-引用图片.md”文件，文件夹中存放图片（test.jpg）。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![描述信息](hexo-引用图片/test.jpg)</span><br></pre></td></tr></table></figure><p><img src="/2017/10/30/hexo-引用图片/test.jpg" alt="描述信息">  </p>]]></content>
      
      
        <tags>
            
            <tag> hexo 教程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo+next添加algolia搜索</title>
      <link href="/2017/10/30/hexo-next%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/"/>
      <url>/2017/10/30/hexo-next%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/</url>
      <content type="html"><![CDATA[<p>当博客达到一定数量的时候，为了方便找到想找的内容，就需要用到搜索了。  </p><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/2017/10/30/hexo-next添加algolia搜索/demo.png" alt="效果图"><br><a id="more"></a></p><h1 id="开始添加"><a href="#开始添加" class="headerlink" title="开始添加"></a>开始添加</h1><ol><li>下载最新的next主题（5.1.0），因为最新版的已经集成了algolia搜索，可以省去很多配置和修改。</li><li>去<a href="https://www.algolia.com/" title="algolia" target="_blank" rel="noopener">algolia官网</a>注册账号（可直接使用github账号登录）</li><li>新建index  <img src="/2017/10/30/hexo-next添加algolia搜索/index.png" alt="index"></li><li>打开API Keys页面，里面的信息等会需要写到hexo的配置文件中<img src="/2017/10/30/hexo-next添加algolia搜索/apikeys.png" alt="index"></li><li><p>在根目录的站点配置文件_config.yml中加入如下配置，参照上图申请到的key值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">algolia:</span><br><span class="line">  appId: &apos;appid&apos;</span><br><span class="line">  apiKey: &apos;apiKey&apos;</span><br><span class="line">  adminApiKey: &apos;adminApiKey&apos;</span><br><span class="line">  indexName: &apos;上面填写的index名&apos;</span><br><span class="line">  chunkSize: 5000</span><br><span class="line">  fields:</span><br><span class="line">    - title</span><br><span class="line">    - slug</span><br><span class="line">    - path</span><br><span class="line">    - content:strip</span><br></pre></td></tr></table></figure></li><li><p>执行hexo algolia.<br><img src="/2017/10/30/hexo-next添加algolia搜索/hexo_algolia.png" alt="hexo algolia"></p></li><li>查看algolia -&gt; Indices<br><img src="/2017/10/30/hexo-next添加algolia搜索/indices.png" alt="hexo algolia"><br>如果无法提交成功，先执行hexo clean即可。</li><li><p>在\themes\next下找到_config.yml，找到如下内容，将enable修改为true，labels修改为自己需要的  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Algolia Search</span><br><span class="line">algolia_search:</span><br><span class="line">  enable: true</span><br><span class="line">  hits:</span><br><span class="line">    per_page: 10</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: &quot;输入关键字&quot;</span><br><span class="line">    hits_empty: &quot;没有找到与「$&#123;query&#125;」相关的内容&quot;</span><br><span class="line">    hits_stats: &quot;$&#123;hits&#125;条相关记录，共耗时 $&#123;time&#125; ms&quot;</span><br></pre></td></tr></table></figure></li><li><p>在themes\next\layout_partials中找到header.swig，找到以下代码并修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">algolia: &#123;</span><br><span class="line">&lt;!-- applicationID: &apos;&#123;&#123; theme.algolia.applicationID &#125;&#125;&apos;,--&gt;</span><br><span class="line">&lt;!-- 改为 (对应站点配置_config.yml中的algolia.appId)--&gt;</span><br><span class="line">applicationID: &apos;&#123;&#123; theme.algolia.applicationID &#125;&#125;&apos;,</span><br><span class="line">apiKey: &apos;&#123;&#123; theme.algolia.apiKey &#125;&#125;&apos;,</span><br><span class="line">indexName: &apos;&#123;&#123; theme.algolia.indexName &#125;&#125;&apos;,</span><br><span class="line">hits: &#123;&#123; theme.algolia_search.hits | json_encode &#125;&#125;,</span><br><span class="line">labels: &#123;&#123; theme.algolia_search.labels | json_encode &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="algolia刷新"><a href="#algolia刷新" class="headerlink" title="algolia刷新"></a>algolia刷新</h1><p>添加了新文章，搜索不到时需要刷新algolia<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo algolia</span><br></pre></td></tr></table></figure></p><p>如果失败，clean一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></p><p>然后再执行 hexo algolia   </p>]]></content>
      
      
        <tags>
            
            <tag> hexo 教程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo常用命令</title>
      <link href="/2017/10/30/hexo%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/10/30/hexo%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>本文介绍hexo的常用命令。  </p><h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><p>npm install hexo -g #安装<br>npm update hexo -g #升级<br>npm init #初始化 </p><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><p>hexo s #启动服务预览并自动更新，无需重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义IP<br>hexo clean #清理缓存<br>hexo g #生成静态网页<br>hexo d #开始部署  </p><p>hexo g -d #生成静态网页并部署，两步并一步</p><h1 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h1><p>hexo publish [layout] <title></title></p><h1 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h1><p>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo server #启动服务预览<br>hexo generate #生成静态页面<br>hexo deploy #部署  </p><h1 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h1><p>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署  </p><h1 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h1><p><img src="/2017/10/30/hexo命令/more.png" alt="more"></p><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><p>error:ERROR Deployer not found: git<br><strong>解决方法</strong><br>npm install hexo-deployer-git –save</p>]]></content>
      
      
        <tags>
            
            <tag> hexo 教程 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
